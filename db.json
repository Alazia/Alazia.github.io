{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/favicon16.ico","path":"images/favicon16.ico","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/favicon32.ico","path":"images/favicon32.ico","modified":0,"renderable":0},{"_id":"source/images/aboutme.gif","path":"images/aboutme.gif","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/bg.gif","path":"images/bg.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"ec24b52e320c2a4569e6c855ef53b2905330e5e4","modified":1610327279568},{"_id":"themes/next/.all-contributorsrc","hash":"97fafb3a87db9add480913c1e189b53bc5ddf45b","modified":1610327279600},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1610327279601},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1610327279600},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1610327279601},{"_id":"themes/next/.gitignore","hash":"8bf1bfc917aa8dd2d886fd36f764447a2b561e1e","modified":1610327279605},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1610327279605},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1610327279605},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1610327279605},{"_id":"themes/next/README.md","hash":"1e993dacb9743e074ae7fe78e82daf6a497fdd49","modified":1610327279606},{"_id":"themes/next/_config.yml","hash":"4b6889e970b2c43f11ed093878553d8c9eb5b566","modified":1610327279607},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1610327279607},{"_id":"themes/next/gulpfile.coffee","hash":"d624a675145f92b6fd4beadb2b16afbd784e1369","modified":1610327279614},{"_id":"themes/next/package.json","hash":"a3667c1207d967fd262402e619f5b3836412ae79","modified":1610327279639},{"_id":"source/_drafts/T01.md","hash":"7045d8842c04dd033612991ccf1d25db41f84cac","modified":1610327279569},{"_id":"source/_posts/TL01.md","hash":"d7019f7e68b0144a0cda88dadbd2f278610b9723","modified":1610506802665},{"_id":"source/_posts/TL02.md","hash":"8f47fd191c9a5579e52173a45ef6cf5cb4de5381","modified":1610506844941},{"_id":"source/_posts/hello-world.md","hash":"dd9f1f111be1c56b73de503a9f9c1120aa42d1e4","modified":1610513352114},{"_id":"source/_posts/hexo.md","hash":"8a442a3b84ca1502f1a100fbf2fc3be93c1b56e9","modified":1610550534541},{"_id":"source/about/index.md","hash":"ce1fb4a2c1a8f20ab9a0dd56737b4c9dc43564d0","modified":1610327279572},{"_id":"source/categories/index.md","hash":"1bd4bb9b63c655b4633c628c7f4e0d8fec921e47","modified":1610327279573},{"_id":"source/images/favicon16.ico","hash":"e772714da6a9b9e38a93de662ec3e78ff84cfba1","modified":1610327279574},{"_id":"source/images/avatar.jpg","hash":"8a94fc1422393dd497bfc0402b773378cc139937","modified":1610327279574},{"_id":"source/images/favicon32.ico","hash":"7037b71b3d71309504ece2efa61fa50fa6cbed57","modified":1610327279574},{"_id":"source/creation/index.md","hash":"7b7037b4b5bfacfa4cda5aa55cc9542c04d57f31","modified":1610599240953},{"_id":"source/tags/index.md","hash":"38dbc6a430676e4c3706796b6ffea851cd3b460c","modified":1610327279574},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1610327279601},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3678df2aadc9fb4b590ed99948762cdbf31df9c8","modified":1610327279602},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1610327279602},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"f1631b9bef922e7bc2db1e33badfad70fd88d459","modified":1610327279602},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1610327279603},{"_id":"themes/next/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1610327279603},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1610327279603},{"_id":"themes/next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1610327279603},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1610327279604},{"_id":"themes/next/.github/release-drafter.yml","hash":"e9fcf23b2cdd250af441002b416aeb9c1313ace1","modified":1610327279604},{"_id":"themes/next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1610327279604},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1610327279604},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1610327279608},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"32c6d2c5c55b96a7f9b6da110127be6ca56ed0fb","modified":1610327279608},{"_id":"themes/next/docs/AUTHORS.md","hash":"bea16c2fd42cdad076588a4671c33c9fff66d747","modified":1610327279608},{"_id":"themes/next/docs/DATA-FILES.md","hash":"942cf13cf3fc7096c1aed84e0c2fce2e60729976","modified":1610327279608},{"_id":"themes/next/docs/INSTALLATION.md","hash":"d747b33d4e0bb7b173b0eee3c427566e49c17b38","modified":1610327279608},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"661deb61a2d225af4498769dba09561046a3d871","modified":1610327279609},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1610327279609},{"_id":"themes/next/docs/MATH.md","hash":"7d0330c250082a86897d1c96fbb4ef5df59538af","modified":1610327279609},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"e1a7d82622845fb2d898043d604e798519d1cde7","modified":1610327279610},{"_id":"themes/next/languages/de.yml","hash":"131f9ad9ef130cfc8058e2764d3ce7e0c1700d39","modified":1610327279614},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1610327279614},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1610327279615},{"_id":"themes/next/languages/es.yml","hash":"19995062f6f9fb9b621fc055e780524c42fccd31","modified":1610327279615},{"_id":"themes/next/languages/fa.yml","hash":"56dccb20a1f156bd278e9c600e397e5ba845d9a1","modified":1610327279615},{"_id":"themes/next/languages/fr.yml","hash":"aeae19629eab296855dc5cddfe6712c2569c7d3c","modified":1610327279615},{"_id":"themes/next/languages/hu.yml","hash":"a52b04cad56168e642eb4d071b05a0dcad53f365","modified":1610327279616},{"_id":"themes/next/languages/id.yml","hash":"f67c884cfbf4f6d5254a34e0ea7193dd746d29ea","modified":1610327279616},{"_id":"themes/next/languages/it.yml","hash":"3e2d836aa93abf642e951fb69c234e8ef150b1c8","modified":1610327279616},{"_id":"themes/next/languages/ja.yml","hash":"29bf46c6e0e3d107d2befc7bce2552668defcd3e","modified":1610327279616},{"_id":"themes/next/languages/ko.yml","hash":"1874f92fffc7b93f9907da76c0bf4953a87795c5","modified":1610327279617},{"_id":"themes/next/languages/nl.yml","hash":"1a0b5fa111c586e1df7fef08637ccb19bcb8eda7","modified":1610327279617},{"_id":"themes/next/languages/pt-BR.yml","hash":"5158cd29b0676d3b79c3b9538f88a2f121741ff1","modified":1610327279617},{"_id":"themes/next/languages/pt.yml","hash":"7b0d3a6cc507cd4325f87af9d84ab9e53e0c50e8","modified":1610327279617},{"_id":"themes/next/languages/ru.yml","hash":"6504871e5f3103ab65391fc3fcab2c6c68a075dc","modified":1610327279618},{"_id":"themes/next/languages/tr.yml","hash":"cd913ee8a69ecd1ba615ba71339d376677b29251","modified":1610327279618},{"_id":"themes/next/languages/uk.yml","hash":"7d0396cb2adb9d44a6756c9352ffe7e0f944f10d","modified":1610327279618},{"_id":"themes/next/languages/vi.yml","hash":"ed57e3263d9da09029bf2afa6853e50033faa4dd","modified":1610327279618},{"_id":"themes/next/languages/zh-CN.yml","hash":"3b6557ff0f1528d8d430dd807c31031f279257a0","modified":1610599361455},{"_id":"themes/next/languages/zh-HK.yml","hash":"f42a0b7a0f0b9844e711ab13b205e8f91ae81098","modified":1610327279619},{"_id":"themes/next/languages/zh-TW.yml","hash":"e72e67b1f8007428aa6952078d1ebf877f438da9","modified":1610327279619},{"_id":"themes/next/layout/_layout.swig","hash":"382c89a9f01baf27c099876d5dec3bd93e573590","modified":1610327279619},{"_id":"themes/next/layout/archive.swig","hash":"b14ab2bdde754a854e8f8afed9ec27de34bb705b","modified":1610327279638},{"_id":"themes/next/layout/category.swig","hash":"de03d88b3ae69c84f5ed5332a84334fa350f9e7a","modified":1610327279638},{"_id":"themes/next/layout/index.swig","hash":"1a0d0ca5723133e75867527b47446a910f07bd97","modified":1610327279638},{"_id":"themes/next/layout/page.swig","hash":"3b50ca16401a3a060004ce2e15dfa84ac2771e03","modified":1610327279638},{"_id":"themes/next/layout/post.swig","hash":"faf4523faadb30cc5d27d919e47f0213f25d9420","modified":1610327279639},{"_id":"themes/next/layout/tag.swig","hash":"2441531ce9b1e7b2c7dd14b988973a5f109841d4","modified":1610327279639},{"_id":"source/images/aboutme.gif","hash":"af020b4f4b98c3bf08567b8ba5b9765e5f0aa2b9","modified":1610327279573},{"_id":"source/_posts/TL01/SSHkey.png","hash":"fe87d7cc08e2e00aedaa947079ff3681f3fd70c9","modified":1610327279570},{"_id":"source/_posts/TL01/branch01.png","hash":"67178a19e55ca86f566c029aa880e65d02ee9f08","modified":1610327279570},{"_id":"source/_posts/TL01/branch02.png","hash":"aaa8e7a4dce9541964401420626f32622bdfacb9","modified":1610327279570},{"_id":"source/_posts/TL01/branch03.png","hash":"d62c751371fe279856053803b4201f0edd68a2eb","modified":1610327279570},{"_id":"source/_posts/TL01/branch04.png","hash":"16353abf19699b75acf231a6a09d64242bdf4f8a","modified":1610327279570},{"_id":"source/_posts/TL01/branch05.png","hash":"1337049a5135af0681a59dcba8c82e72843e79ca","modified":1610327279570},{"_id":"source/_posts/TL01/branch06.png","hash":"9c901001136d7eb1030b0069c2fd566f661abbfb","modified":1610327279570},{"_id":"source/_posts/TL01/branch07.png","hash":"cf981952a2ed1a3fb4be484962b46c7fae150313","modified":1610327279570},{"_id":"source/_posts/TL01/stage.png","hash":"e570a03fd965fbd70a7e6b0d8514cb1ca4f9c257","modified":1610327279571},{"_id":"source/_posts/hello-world/va11.jpg","hash":"aa879771bdb78fd509c80d3adba52675a911bb73","modified":1610327279572},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1610327279602},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1610327279602},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1610327279602},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1610327279602},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"5b688fb1bef2895b53b538519b002c3bc1e8b177","modified":1610327279610},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1610327279610},{"_id":"themes/next/docs/ru/README.md","hash":"a4fbc2813d1c55d1f7ff14667b85db0344ca247d","modified":1610327279611},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1610327279611},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1610327279611},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"1c21127b1a5004e99169fe8bbf5493245f07e843","modified":1610327279612},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"2027caa3439175dc610807bd4f196856783c167d","modified":1610327279612},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"a27aab06239754d193e21d742e82c67eece4d5b7","modified":1610327279612},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"979b9b49ed2e3181fce9f2dc1c40b5fa8b0eeeed","modified":1610327279612},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"6e5c7a23a352da7f767ddbef91b16cf69db11cea","modified":1610327279613},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"db2797f161e1e7a4987cbfa3d1be682266dfbba6","modified":1610327279613},{"_id":"themes/next/docs/zh-CN/README.md","hash":"21762c4cf04dc1aafa1072cfdfe9452912da2778","modified":1610327279613},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"fd9f5e17eb05159d06d222761c315f34d981b693","modified":1610327279613},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"4b394bcd4a93d3bca97b2526c3fc71d16abe7026","modified":1610327279620},{"_id":"themes/next/layout/_macro/post.swig","hash":"7578f2dd54ac0bfa4f4ff3e367ec608f7080286d","modified":1610327279620},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"593e63c5c944c3749e6a6d30c20ed1476e31301e","modified":1610327279620},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5de46777a3c61a08acf302f691c5e92ae9d0fc8e","modified":1610327279621},{"_id":"themes/next/layout/_partials/footer.swig","hash":"a668cce2340392542ccd1c0a10c05aac12cb027f","modified":1610327279622},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"0b72b9a8b3bb5ef6accebbf1e9f6b1287cc3da79","modified":1610327279622},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"a687b909d56e3323f5ea3b550bb091793aa9b24c","modified":1610327279624},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"ada4cf714ff1a85985d2d7c3c24dc0bb023a6d0e","modified":1610327279624},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6042ec5d4d5758faeceb4ef7202457456e4a81b6","modified":1610327279627},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"205df292ba697e8ff7e34ae5c6f823f461dfe721","modified":1610327279627},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"a0921aa828c8ef4719558f736aac2a64e1e79b0b","modified":1610327279627},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1610327279627},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"083eacc4783efed16cba57c0927ad38aebd7a35c","modified":1610327279629},{"_id":"themes/next/layout/_scripts/three.swig","hash":"ff560516a4f6e83fc8d6ce57dc08f6d2de76bc2e","modified":1610327279629},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"21b15f14cacbfd86f6b885e23943190703bc90a6","modified":1610327279629},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"c9039e71495cb6aa021f2e6d787c6384b2addcbd","modified":1610327279631},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"5c4c4b99b07ee76bc4233407286d85270c6247fb","modified":1610327279632},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"ac2e41ff3438299a0f834b45bb6b155003ebf87b","modified":1610327279633},{"_id":"themes/next/layout/_third-party/index.swig","hash":"44812518c9be1f349353a64343a545c4267483e3","modified":1610327279634},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"76a266dea5a582229b9b5629dc8454c097b56ab8","modified":1610327279636},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"74314e9b27c40acef442f5431e87025562844af5","modified":1610327279636},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"a6bd5c57cef612404bfe43bedde64b47ed6be86f","modified":1610327279637},{"_id":"themes/next/scripts/events/core.js","hash":"10d37fd8ac11d760bc35cb7b19c98ddd7610696e","modified":1610327279640},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"1a1abfb4a28fbcd9315666e268b0cc56f230a2a2","modified":1610327279642},{"_id":"themes/next/scripts/filters/exturl.js","hash":"4911d916f4ba635c9769af97ef885ab9efb5ad37","modified":1610327279642},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"3b68841eebde1e4ac0d19c3e82d6e2b5e7401619","modified":1610327279643},{"_id":"themes/next/scripts/filters/minify.js","hash":"a18804f1bef96f955de5d9453a78beee02f66e1f","modified":1610327279643},{"_id":"themes/next/scripts/helpers/engine.js","hash":"a10a04da20c48c013a5cbb642546de8fb654f60d","modified":1610327279643},{"_id":"themes/next/scripts/helpers/font.js","hash":"872934a2e31a45284487ab37c61403c8f6d10890","modified":1610327279644},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1610327279644},{"_id":"themes/next/scripts/tags/button.js","hash":"39156bf735c1d1ebd0d418c411f14ff4f0acdd75","modified":1610327279644},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"6fbc5764dddca114667f1487120a9ed32519857b","modified":1610327279644},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1610327279644},{"_id":"themes/next/scripts/tags/full-image.js","hash":"418e765ce23a3e5e9929d155750706eb2a90b10c","modified":1610327279644},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8e1befa08c07f822f9487978dbd27db60fb700c7","modified":1610327279644},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"9c6363b36bea3f5821656b916d08fcc1ed1eee51","modified":1610327279645},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1610327279645},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1610327279645},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1610327279645},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1610327279645},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1610327279645},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1610327279646},{"_id":"themes/next/source/css/main.styl","hash":"97789c65261af8c2361f1edebecbe53500b39ad7","modified":1610550534541},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1610327279668},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610327279669},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1610327279669},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1610327279670},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1610327279670},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1610327279671},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1610327279672},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1610327279672},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1610327279672},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1610327279672},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610327279673},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610327279673},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1610327279673},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1610327279673},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1610327279673},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1610327279673},{"_id":"themes/next/source/js/algolia-search.js","hash":"33c0f0685977f53f8a813c7cfc9d3b71014e1a27","modified":1610327279673},{"_id":"themes/next/source/js/exturl.js","hash":"e369d3d0301a889de894aea0be2bbd1c7c8d3a0c","modified":1610327279673},{"_id":"themes/next/source/js/js.cookie.js","hash":"31a8e8d1b0f2c5b763368544b12f42b09df86804","modified":1610327279673},{"_id":"themes/next/source/js/local-search.js","hash":"44c6d0f8907e8b2b792d474dcc94ad6add07cbe7","modified":1610327279674},{"_id":"themes/next/source/js/motion.js","hash":"ba588549879501daf3021007e5d4a3a4556cd2df","modified":1610327279674},{"_id":"themes/next/source/js/next-boot.js","hash":"cbd2ce3e4bbacd3d210cbabc9c8547e2f02706c0","modified":1610327279674},{"_id":"themes/next/source/js/post-details.js","hash":"82a1339034bcbf370760ea4bc5000dadaf44a36b","modified":1610327279674},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1610327279675},{"_id":"themes/next/source/js/scrollspy.js","hash":"e71ac20c5121fcae901422821a4ca1b203d82ce8","modified":1610327279675},{"_id":"themes/next/source/js/utils.js","hash":"4d7fa2ecca140565ce765ca8fd91702ce5b66909","modified":1610327279675},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610327279663},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610327279663},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610327279668},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"89b0b1899a29d7e37e0461333fd2c9c8fcd30bc6","modified":1610327279620},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"d2aa948b74fa2863fccca50162669dadde4d09ea","modified":1610327279619},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"92fa1e0d127f9f010ee07fe7b09f06c7e1a6b946","modified":1610327279621},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"e84ac4b94609eced166264dc075534378317280a","modified":1610327279621},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"9a8c25d9ba46307a87cc2d6bbd19bf80b7c518dc","modified":1610327279621},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"c24b5c7ac76d023d0af3169630121480404e5054","modified":1610327279621},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"beae144f3797086461a731f462791b9de113f900","modified":1610327279621},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"67d837cd8bd9c968b07d8806471517e44578822c","modified":1610327279622},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"52f69c30eb426d65fe4d043d95651a0fb38fe144","modified":1610327279622},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"89fd4176f8699dee9e24876713e127039ade6417","modified":1610327279622},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"98959bab57d9ca0b31083c1abab661a0cac3eea3","modified":1610327279622},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"143f30173ac6d728f2840062e61006cf78d06830","modified":1610327279623},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"542f00ab9ecfd4728c91687260b0f3d31ae62a31","modified":1610327279623},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"3260c630beeecc32ad5f54d741fff9c0d588fb83","modified":1610327279623},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"d41897fa8ce9925f97ffe27cfa0f11dc84c2443d","modified":1610327279624},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"6479723a83cbc036aa5965b5c594ddafdf8966d3","modified":1610327279625},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"8b98b31b1ba5a745743828cd916b97e81089c6e6","modified":1610327279625},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"2fa7fa909e4cd24c0f520b856f4e74c43af6314f","modified":1610327279625},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"6445fffd63c576bada069c9fa520bf0f6019890b","modified":1610327279625},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"277367168c647ff0160034bb93f1b069780f60ce","modified":1610327279625},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"4c1887a271e2e72aa022922261516ebc52679abb","modified":1610327279625},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1610327279626},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1610327279626},{"_id":"themes/next/layout/_partials/share/index.swig","hash":"61da1db22fa06e8a9c938058ba04f5371f174146","modified":1610327279626},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"ce6ec300496147f2f957af92b86924b6c81f4725","modified":1610327279626},{"_id":"themes/next/layout/_partials/share/needsharebutton.swig","hash":"7f2727c43e2bda5839765a2005e42d1075d653d3","modified":1610327279626},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"2af487fdef7f1bdab2dadf11fe070d17fb9631ef","modified":1610327279627},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1610327279628},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"f69df5c993a738aaa9be384b0bb70d2a8bc95599","modified":1610327279628},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1610327279628},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1610327279628},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"52eb1ecfab137aee28b09ef502d2e7dceb9dfd9a","modified":1610327279628},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a6eca4e64db33e95d558a19352123a8762d0c35a","modified":1610327279628},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-jquery.swig","hash":"620d9c26702be8126b0924efba373ae0749fdf08","modified":1610327279630},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"327b7c604ec2f4c18410f8edf04cbb1fd779e1ff","modified":1610327279630},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"33c82143da3d2d11e01707eb3eab0e9462795139","modified":1610327279630},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"c431a20b4e717977e932ae44b0f6fcf2726440ff","modified":1610327279631},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"dcdb7ee25795c879fe6bf11e79ada746981902ba","modified":1610327279631},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"90c961abc694275f68a9bbf7f23c3737457fdd01","modified":1610327279631},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"8471561b228132f4863177ff5a6579f540a50bb4","modified":1610327279631},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71101e27b1955a83e324cadef8b2358b0d022373","modified":1610327279631},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"e8aa0ba146b658ae3b73efc4ca63325886bbaa2d","modified":1610327279633},{"_id":"themes/next/layout/_third-party/chat/index.swig","hash":"f2d07d655dbd7b8381be36f56204706b897b8eab","modified":1610327279633},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1610327279633},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"17ae5c9fdb1d716cfe9d1b1f583a1cb5a2f8d388","modified":1610327279633},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"ffdf0230514d02706f7d8877e9a9ec0195048e39","modified":1610327279633},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"3127b618ef8bf48a5e6350746a204004236979b2","modified":1610327279633},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"903063d24aa57981c14ea1989e9c724da01b62b4","modified":1610327279633},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"44e0153fdda0b72e6c3cb4c17931b5c9f8aadd4a","modified":1610327279633},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"714804c281f6461e7115ed264a7ae675ef07ac64","modified":1610327279633},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"8c753069a754374a7a2f52a3b8ab3eb00dca7b45","modified":1610327279635},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"990ea1a5c978a58922e6267270462210637c20c2","modified":1610327279635},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"56c3200c5e0e42bdd775d3676322da65a3375a5d","modified":1610327279635},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"3a67ef3513936f00a3680a2a39728418201e3a59","modified":1610327279636},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"db6842138f6172f16a8b767163305a4ef517afe6","modified":1610327279636},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"c73e07b847ca576ee54cdbd422a5f18ba7a69b46","modified":1610327279636},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1610327279636},{"_id":"themes/next/layout/_third-party/tags/index.swig","hash":"78bfe0cff0c32e3a55815808a128cf305d27d3bc","modified":1610327279637},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"e9c7c7c0fe8cb2a09971dde32687fde38f2048d4","modified":1610327279637},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d32ef7d38c62350de120bb56df78db4b36619d14","modified":1610327279637},{"_id":"themes/next/scripts/events/lib/config.js","hash":"e5f677c5377042a82b0c67ce0b337024e6d58d8b","modified":1610327279640},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1610327279640},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"8c7568782083b0d5375b2c8a4c56f82667c2fb2d","modified":1610327279640},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a4fcb322397785100c79393b675a39235989b368","modified":1610327279641},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"70ce24e661933f0a88ce3d0bdb5fac1b2c36e21a","modified":1610327279641},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"0d9be6aba75aa27fc5d94fbd0ddca2803e0f5ab2","modified":1610327279641},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"353be438ad0659039fbb0e16e6e5f7c422737e32","modified":1610327279641},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"50ad917ebc7ff9f997b6e9244757f143cf4ec009","modified":1610327279641},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"ff0a8f6b74a426e7bc0a35ded903f3a25f3d18be","modified":1610327279641},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"e842c4d246f2b6b87738ba5731b198d8ebb001a9","modified":1610327279642},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"1d17d5cf26cf6dcc0f0413ebf7c520f864420f0e","modified":1610327279642},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"0c1335f4cc67a10720d194acebd37e866531e52e","modified":1610327279642},{"_id":"themes/next/scripts/filters/comment/warn.js","hash":"3299d02be11afb3461b257ac2f0300b89ee42545","modified":1610327279642},{"_id":"themes/next/source/css/_custom/styles.styl","hash":"de68ab101db2d8ba2018e4b5e62a78614c8c30c6","modified":1610327279663},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"b58ed9dabc5be0090647d9a0afc43359e1e0e14c","modified":1610327279663},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"89392949ae2014cce01ad21f5e81e3932363a243","modified":1610327279663},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"925e6e2a17f9e9b84ee0a14ced2e62765d146595","modified":1610327279663},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"eba5a974d0e093b04dbe8aff9de0b5cb18adfe42","modified":1610327279667},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"39c600599afe3a41fbc457605d6ee20879f6ab87","modified":1610327279667},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"1934ee185bc3153c7eacabf232dcaa34d80833e9","modified":1610327279668},{"_id":"themes/next/source/css/_variables/base.styl","hash":"89b3829ba23721480f053c7af600cc4ac4c08800","modified":1610327279668},{"_id":"themes/next/source/images/bg.gif","hash":"7231ae69e166cb4d00590d353cf9256f6f2e2548","modified":1610327279670},{"_id":"themes/next/source/js/schemes/muse.js","hash":"147d47c55b7e5b4ae4d459eab77361ad7c433c99","modified":1610327279675},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"4eee40bf7a6101a694b938619ec0345927d1fd9a","modified":1610327279675},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1610327279676},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1610327279676},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1610327279677},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1610327279677},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1610327279677},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1610327279683},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1610327279683},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1610327279684},{"_id":"themes/next/source/lib/jquery/index.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1610327279682},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b7ad19b33d863f8b7cf4a17131b7f7aede8400c5","modified":1610327279646},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"9495d5ee237019c189b1fe8b54e87af81c55d8f2","modified":1610327279647},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"a4422bd89a75f10fd7830b335a485cbc6f91c828","modified":1610327279647},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"f7ea87318188a7d99247aca87aac05bb901b3719","modified":1610327279647},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b1e54c2dd2d77839c34381095347672f6cc55d2d","modified":1610327279647},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"30a63469ac2a412f49ebb33adf091afa4050fe18","modified":1610327279651},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"d75b4defc475dee6aa31c316d36a1082622a76ad","modified":1610327279654},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"ede406ddaf1fb1c930e6923dc193af3c0f5ef03a","modified":1610327279655},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2cc36faa1f0bbde692c58ca9ab1d2a7f26c85dea","modified":1610327279661},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"21dcc28bba8c163410f16dc511f1c9f1d91fba66","modified":1610327279662},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"75c358736c5a7aa71c8323549f54edc8ede98cc5","modified":1610327279662},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"ee5a3ffacfad0c866d86c92024b9380f0ad9c3eb","modified":1610327279662},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"0cdd236cce4d1149effd59965be46c98718eefe9","modified":1610327279662},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"d348813d20a3bdbb198ffb96daf377402d0d7da0","modified":1610327279662},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"c6b3582bc38614b1d7946631fcd804e6a2e2cd5f","modified":1610327279662},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"968ee57910e07b776414a2e1b72a6aa25197518b","modified":1610327279664},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"392ffe4826761e5e8fc0b5ecd544c312bccb69d9","modified":1610327279664},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"369c6cc457931bd6a06edf82e81ed1a64d14d236","modified":1610327279664},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"c3d2430baa32195ed87c0a68de552b2e58ff9892","modified":1610327279664},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"1c7d0faa6dc1ffe3f9905bf18ee5ccbca72e52af","modified":1610327279664},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"10e64942c543f56bda96d7582d161976196b6a4c","modified":1610327279664},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"be371172d4062e4323c691bbe0287d5d6a8ea57d","modified":1610327279664},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"f4210e679c8d7426f26970e03b1b8073644903f5","modified":1610327279665},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"680289692575b11d46a1affaf7caf4f7bfd1ab03","modified":1610327279666},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a9f4efe3806bac77e002fe5505b48fb2ad4f5051","modified":1610327279666},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b3e565299d232b39c64bcae2d93e67b5bf9b1d04","modified":1610327279666},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c804a7690815e9db61835d2f0db031515d9b2e0b","modified":1610327279667},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"306d38bcd15d292afaf73d06785b06f868bab980","modified":1610327279667},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"5d8263288c2ba595db42f969b69c0baa00baa640","modified":1610327279667},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"a3e34dbde516d6904ce986b964aa7a971af97507","modified":1610327279667},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"975a71f7f9ffcac9d378cdcb292f27d8785b04be","modified":1610327279667},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"e71fcda9d45aa34075451c6d8458249f2be889ae","modified":1610327279667},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1610327279678},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1610327279677},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1610327279678},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1610327279680},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1610327279683},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"5fe92eaec2acec10011e2aefbb4ec6334d032ae0","modified":1610327279647},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ad13757a523e8087242c4e7ad9c04ff4140facf9","modified":1610327279648},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"42aa2b1f53bd936b1130aba5deb41826444d38e5","modified":1610327279648},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"09e8b46568d84b12c41b3151f2ab00cd342f3ac5","modified":1610327279648},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1610327279648},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"b7b3449cfd9959025bad6d016f1900e5b7043266","modified":1610327279648},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"92942666c2aaa949c4e09ed967fc0dfd6c563086","modified":1610327279650},{"_id":"themes/next/source/css/_common/components/highlight/copy-code.styl","hash":"261931eb3ca8ce17a05c5bb868273c699f3eb930","modified":1610327279650},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1610327279650},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"33125c539f19ea932d3576fd99dbebf6caccc617","modified":1610327279650},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9099267fc2746ddf4a4fa7bd2902233ee7f4ad24","modified":1610327279650},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"64d29947f7b6db212741f1995d93f0f476ecff4b","modified":1610327279650},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"b90f52486496cc55aef09bf4c9ea50cfc0fdc1ec","modified":1610327279651},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1610327279651},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"26afe9f5ca35f330ea13bb7018e1ddf5f229b2f6","modified":1610327279651},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"84f38fdb15eaab4b2cd62eb878a23bc715494a18","modified":1610327279651},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1610327279651},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1610327279651},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"680c3854a0c25b19e50082165bb030dc492c79cb","modified":1610327279652},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"e501d282f348a41af1c11cdedcdbba7df8f712c3","modified":1610327279652},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"abcaf32acbbde3c7ff6a9062eed88f42d23d5841","modified":1610327279652},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"db32d1cd9ea93503b202bb17ed493a8b57d2ff88","modified":1610327279652},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c05a48df1ad35f67ac85c198765a95fac158aad3","modified":1610327279653},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e7a97e6a12a3f6c23b0b7bf97359fe8ba57c16ba","modified":1610327279653},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"bb1cdbe39d9948474f80d0915ac9cf9cf63fbe7f","modified":1610327279653},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"05dbe2e03980bf1fe696dfb12867bd6b0fb8e5b8","modified":1610327279653},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b870dc21a0bbf624e514af010179b84c894c9d56","modified":1610327279653},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1610327279653},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"9a170dfd798f10bbadb4078ce464d42a7bfbef9b","modified":1610327279653},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8fcb4e667a02e3ab98bd24ab217312379d018d06","modified":1610327279653},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"a3ae931fdec43778cb4cf72c7c1836972aef7028","modified":1610327279654},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"712ebcfe7472b9e6efbbd7293239eccd5af90afd","modified":1610327279654},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"d0bd9c94300e12c15d7bbcb749d8e5ce51b1dbce","modified":1610327279654},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"c6eabc2676fd7d5eded568cebb8a529ac4e9227a","modified":1610327279655},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"bfbb2b8dfceb79c5adcc31338f9cc8efdd3c1bc6","modified":1610327279655},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"db0a59d5ae353d6ab475a28bd9ec54795955e538","modified":1610327279655},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"89d1460a8998e0116714f3ca720cf6dd6c66fc9d","modified":1610327279655},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"7d49f99edd8c27d4fcbbc604c66bb619023cef73","modified":1610327279655},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"f3d00c8b1dfff26ed4075e04de17ddaf190d9bfb","modified":1610327279656},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"ba732c3489d0db25f7c36cd4d82bc0b8f3747f6f","modified":1610327279656},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"dfbc9edbd7f8c98e04a439b886186716c1b99e33","modified":1610327279656},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"4e01bb427f3b26d5244a21792cc383a647e26eba","modified":1610327279656},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"92fbaa079a46242d2f654ac62b9621057ebeda28","modified":1610327279656},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2d4af920d3476a00b0bf3ef8d6ec30388f3014da","modified":1610327279658},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"96cd2c98864e5b81b8bc463212328fab4011942f","modified":1610327279658},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"923a46b3b766f9ff6b8f2cc4073978d266635e86","modified":1610327279658},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"919d996ffc05c0ffd4bd308c3bea6980ddd123a5","modified":1610327279658},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"34d36d0c41050e3551e528ca1be8cd832f86feb7","modified":1610327279658},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"c9337e837f10c5f40c27a0c0a012f39dfadc7572","modified":1610327279658},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"8a3bf8b8be16ff1c10002dd0f450bb64c1ac1df6","modified":1610327279658},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c75baf181834b65ccb7642fbf1ff33e63a1de820","modified":1610327279658},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"2551c6cd4c01fe672be271c98810919170a6d13b","modified":1610327279658},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1610327279659},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d8551695006c61a568127ecfb4c82954ef3440a2","modified":1610327279659},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1610327279659},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"8c6ef3a29859c131ad559b1ae1a7edfd6bcd128e","modified":1610327279659},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"5f1c6d1d7ad071c5f947aaaa7b4a458512f17111","modified":1610327279660},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"367c51dfaf9b33fc2d707d3c7008e195f3293da9","modified":1610327279661},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"f818a1c203f9af2a890e2654f1197875b8ff5cc4","modified":1610327279665},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/_sidebar.styl","hash":"0bc97d80216556f5ada041d80fbc1d361515ab96","modified":1610327279667},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"69a95eea0f75eb932b98ef6f3fe700d810b783d8","modified":1610327279667},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1610327279680},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1610327279680},{"_id":"public/about/index.html","hash":"dee2b6b0debd5bebb6cf3b3e33c806f5cc16cc59","modified":1610599582700},{"_id":"public/categories/index.html","hash":"e406f669f502b2363019df5605733d66336b9cfd","modified":1610599582700},{"_id":"public/creation/index.html","hash":"7a4c104374fc8184bd88b18c6659ce4b04c70274","modified":1610599582700},{"_id":"public/tags/index.html","hash":"f95566e3839ce943f23bbed845aab066f40a4660","modified":1610599582700},{"_id":"public/categories/CODE/index.html","hash":"5e6e08a3b96d05b3d65086c9cd5b801481ec7041","modified":1610599582700},{"_id":"public/categories/Hexo/index.html","hash":"e6d5b363d1960d04ddd1760c418a5219d81aa01d","modified":1610599582700},{"_id":"public/tags/Tools/index.html","hash":"42f35c4b25e74071bf5dc2210a6939652606bafa","modified":1610599582700},{"_id":"public/tags/Thoughts/index.html","hash":"d181f3c838093b623878b9d89cf4b4de7207c6b0","modified":1610599582700},{"_id":"public/tags/OS/index.html","hash":"67b0163878e841d8d99a9cfde12485b6b43bf5a1","modified":1610599582700},{"_id":"public/tags/workflow/index.html","hash":"94a75a8c71922b9bba8352570a40a7d7d75085a8","modified":1610599582700},{"_id":"public/archives/index.html","hash":"127b8e5b80621830f987a2b5eb121506eba8d13c","modified":1610599582701},{"_id":"public/archives/2021/index.html","hash":"d36a8c0480f1c72327eba18499338f02c6e8780f","modified":1610599582701},{"_id":"public/archives/2021/01/index.html","hash":"95ffccdc6a48973f8e1d1f2a8ae4e32f658e3a1d","modified":1610599582701},{"_id":"public/2021/01/13/hexo/index.html","hash":"2a234fe159bd6a016d44f93ad37e8ac77e3abe3a","modified":1610599582701},{"_id":"public/2021/01/11/TL02/index.html","hash":"701bd37be3a396d84a2f04a68e2dcfd7261cc15c","modified":1610599582701},{"_id":"public/2021/01/11/TL01/index.html","hash":"1755f1a43c2473e0930ee220217f265fc6d6dcd3","modified":1610599582701},{"_id":"public/2021/01/01/hello-world/index.html","hash":"f4a6c47b795f0f28021e2aee0babadecc3c47915","modified":1610599582701},{"_id":"public/index.html","hash":"1bfca1c217f2a1febfbd06a94b7c96c4bc628b92","modified":1610599582701},{"_id":"public/CNAME","hash":"ec24b52e320c2a4569e6c855ef53b2905330e5e4","modified":1610599582701},{"_id":"public/images/favicon16.ico","hash":"e772714da6a9b9e38a93de662ec3e78ff84cfba1","modified":1610599582701},{"_id":"public/images/favicon32.ico","hash":"7037b71b3d71309504ece2efa61fa50fa6cbed57","modified":1610599582701},{"_id":"public/images/avatar.jpg","hash":"8a94fc1422393dd497bfc0402b773378cc139937","modified":1610599582701},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1610599582701},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1610599582701},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1610599582701},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1610599582701},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1610599582701},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1610599582701},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1610599582701},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1610599582701},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1610599582701},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1610599582701},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1610599582702},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1610599582702},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1610599582702},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1610599582702},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1610599582702},{"_id":"public/images/aboutme.gif","hash":"af020b4f4b98c3bf08567b8ba5b9765e5f0aa2b9","modified":1610599583002},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1610599583002},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1610599583003},{"_id":"public/2021/01/01/hello-world/va11.jpg","hash":"aa879771bdb78fd509c80d3adba52675a911bb73","modified":1610599583003},{"_id":"public/2021/01/11/TL01/branch01.png","hash":"67178a19e55ca86f566c029aa880e65d02ee9f08","modified":1610599583003},{"_id":"public/2021/01/11/TL01/branch02.png","hash":"aaa8e7a4dce9541964401420626f32622bdfacb9","modified":1610599583003},{"_id":"public/2021/01/11/TL01/SSHkey.png","hash":"fe87d7cc08e2e00aedaa947079ff3681f3fd70c9","modified":1610599583003},{"_id":"public/2021/01/11/TL01/branch03.png","hash":"d62c751371fe279856053803b4201f0edd68a2eb","modified":1610599583003},{"_id":"public/2021/01/11/TL01/branch04.png","hash":"16353abf19699b75acf231a6a09d64242bdf4f8a","modified":1610599583003},{"_id":"public/2021/01/11/TL01/branch05.png","hash":"1337049a5135af0681a59dcba8c82e72843e79ca","modified":1610599583003},{"_id":"public/2021/01/11/TL01/branch07.png","hash":"cf981952a2ed1a3fb4be484962b46c7fae150313","modified":1610599583003},{"_id":"public/2021/01/11/TL01/stage.png","hash":"e570a03fd965fbd70a7e6b0d8514cb1ca4f9c257","modified":1610599583003},{"_id":"public/2021/01/11/TL01/branch06.png","hash":"9c901001136d7eb1030b0069c2fd566f661abbfb","modified":1610599583003},{"_id":"public/css/blog-encrypt.css","hash":"22e25b0d16ea053d25eb971e038c817a4c9cb584","modified":1610599583003},{"_id":"public/lib/blog-encrypt.js","hash":"91fda12d550323056762c5408623eb8a1d201ecc","modified":1610599583003},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1610599583006},{"_id":"public/js/exturl.js","hash":"7934e9b62fac92731bc450c8a9847e17b77324ab","modified":1610599583006},{"_id":"public/js/algolia-search.js","hash":"c980038cbf83b89bad9051a29737bebc5dc27129","modified":1610599583008},{"_id":"public/js/local-search.js","hash":"dc5c2f370c1dd4900e6fb45d1fa266cd1cf21976","modified":1610599583008},{"_id":"public/js/js.cookie.js","hash":"7919f3a96e156ca52e59b61266468f9f2a2eb97e","modified":1610599583008},{"_id":"public/js/motion.js","hash":"ca2965da47ba9fc5b0dde0a825c29e0817b965b9","modified":1610599583008},{"_id":"public/js/next-boot.js","hash":"0f5eeabac85b693be73b6af74fd7493b6e493b91","modified":1610599583008},{"_id":"public/css/main.css","hash":"ba7858e02f72ef02053a9a91c76918e54b85c239","modified":1610599583008},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1610599583008},{"_id":"public/js/post-details.js","hash":"a614a3830f7dfcd4df303c1255d558a135b3854e","modified":1610599583012},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1610599583012},{"_id":"public/js/scrollspy.js","hash":"e630d9b05ab6bcc9ebab92435587d5a554eb0e3b","modified":1610599583012},{"_id":"public/js/schemes/pisces.js","hash":"aa699718261b87e380b1425b069df4b657d94739","modified":1610599583012},{"_id":"public/js/utils.js","hash":"d0d40de8026b5b11c097e1939050bfbcae286418","modified":1610599583012},{"_id":"public/js/schemes/muse.js","hash":"718dae82e96269848d06d3a1de64d2ef3301139f","modified":1610599583012},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1610599583012},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1610599583012},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1610599583012},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1610599583012},{"_id":"public/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1610599583012},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1610599583012},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1610599583012},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1610599583012},{"_id":"public/images/bg.gif","hash":"7231ae69e166cb4d00590d353cf9256f6f2e2548","modified":1610599583012},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1610599583012},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1610599583017}],"Category":[{"name":"CODE","_id":"ckjwdelzs0004b4txfj2g6wx6"},{"name":"hexo","_id":"ckjwdelzw0009b4tx4q8zg9rp"},{"name":"Hexo","_id":"ckjwdelzz000db4txxbuyyp6i"}],"Data":[],"Page":[{"title":"关于我","type":"about","comments":0,"_content":"#### Alazia\n\n![avatar](../images/aboutme.gif)\n\n```\nmale\n21\n178 cm\nsecret kg\nKM enthusiasts and pseudo-intellectual.\n```\n\nthe CZO of Bankrupting  Co.,Ltd and the brain of The Institute of Human Brain.\nNumerous hobbies,include classical music,opera,philosophy,logic,psychology,art,tarot,chess,anime,network security etc.\nlike to share and <b>`drink`</b>\n","source":"about/index.md","raw":"---\ntitle: 关于我\ntype: \"about\"\ncomments: false\n---\n#### Alazia\n\n![avatar](../images/aboutme.gif)\n\n```\nmale\n21\n178 cm\nsecret kg\nKM enthusiasts and pseudo-intellectual.\n```\n\nthe CZO of Bankrupting  Co.,Ltd and the brain of The Institute of Human Brain.\nNumerous hobbies,include classical music,opera,philosophy,logic,psychology,art,tarot,chess,anime,network security etc.\nlike to share and <b>`drink`</b>\n","date":"2021-01-11T01:07:59.572Z","updated":"2021-01-11T01:07:59.572Z","path":"about/index.html","layout":"page","_id":"ckjwdelzq0001b4txw33jrd0d","content":"<h4 id=\"Alazia\"><a href=\"#Alazia\" class=\"headerlink\" title=\"Alazia\"></a>Alazia</h4><p><img src=\"../images/aboutme.gif\" alt=\"avatar\"></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">male</span><br><span class=\"line\">21</span><br><span class=\"line\">178 cm</span><br><span class=\"line\">secret kg</span><br><span class=\"line\">KM enthusiasts <span class=\"keyword\">and</span> pseudo-intellectual.</span><br></pre></td></tr></table></figure>\n\n<p>the CZO of Bankrupting  Co.,Ltd and the brain of The Institute of Human Brain.<br>Numerous hobbies,include classical music,opera,philosophy,logic,psychology,art,tarot,chess,anime,network security etc.<br>like to share and <b><code>drink</code></b></p>\n","site":{"data":{}},"length":289,"excerpt":"","more":"<h4 id=\"Alazia\"><a href=\"#Alazia\" class=\"headerlink\" title=\"Alazia\"></a>Alazia</h4><p><img src=\"../images/aboutme.gif\" alt=\"avatar\"></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">male</span><br><span class=\"line\">21</span><br><span class=\"line\">178 cm</span><br><span class=\"line\">secret kg</span><br><span class=\"line\">KM enthusiasts <span class=\"keyword\">and</span> pseudo-intellectual.</span><br></pre></td></tr></table></figure>\n\n<p>the CZO of Bankrupting  Co.,Ltd and the brain of The Institute of Human Brain.<br>Numerous hobbies,include classical music,opera,philosophy,logic,psychology,art,tarot,chess,anime,network security etc.<br>like to share and <b><code>drink</code></b></p>\n"},{"title":"分类","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ncomments: false\n---\n","date":"2021-01-11T01:07:59.573Z","updated":"2021-01-11T01:07:59.573Z","path":"categories/index.html","layout":"page","_id":"ckjwdelzs0003b4txgwtxzn06","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"creation","comments":0,"_content":"","source":"creation/index.md","raw":"---\ntitle: creation\ncomments: false\n---\n","date":"2021-01-14T04:40:40.953Z","updated":"2021-01-14T04:40:40.953Z","path":"creation/index.html","layout":"page","_id":"ckjwdem1o000ob4tx1b1g7ond","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"标签","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\ncomments: false\n---\n","date":"2021-01-11T01:07:59.574Z","updated":"2021-01-11T01:07:59.574Z","path":"tags/index.html","layout":"page","_id":"ckjwdem1p000pb4txqu0c60ek","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Git","comments":1,"_content":"##### 为什么学Git?\n- 1 工欲善其事，必先利其器\n- 2 Def：`distributed` Version Control System(VCS) for tracking changes in computer files\n- 3 His:　\n    &nbsp;&nbsp;&nbsp;Linus->Linux (1991)：diff+Linus手工合并代码:CVS\\SVN集中式速度慢,商用版不符合开源精神\n    &nbsp;&nbsp;&nbsp;2002：BitKeeper(BitMover)授权Linux社区免费使用\n    &nbsp;&nbsp;&nbsp;2005：Andrew(Samba开发者)试图破解BitKeeper协议，收回。\n    &nbsp;&nbsp;&nbsp;Linus->Git(by C) in two weeks\n    &nbsp;&nbsp;&nbsp;2008:GitHub\n\n\n##### Install \n- 1 win: https://git-scm.com/download/win\n\n##### Basic commands\n```\n$ git init   // initialize Local Git Repository \n$ git add<file>  // Add File(s) To Index\n$ git status  // Check Status of Working Tree\n$ git commit  // Commit Changes In Index\n$ git push   //Push to Remote Repository\n$ git pull    //Pull Latest From Remote Repository\n$ git clone  //clone Repository into a new Directory\n```\n<!-- more -->\n\n##### Use\n###### 1.init \n- 1 Def repository:一个可以被Git管理、追踪(`Changes`文件的修改、删除、添加)的仓库，以便将来可以“还原”。\n- 2 Use:\n    ```\n    $ mkdir myres //创建文件目录\n    $ cd myres  //进入文件夹\n    $ git init  //初始化仓库(将文件夹转为Git仓库)\n    Initialized empty Git repository in ../myres/.git\n    ```\n\n###### 2.add与commit \n- 1 Def \n    **add**: 将工作区文件添加到暂存区(Index/stage)\n    **commit**: 提交添加(将文件从暂存区stage提交到版本库)\n    **rm**: 删除文件\n![s](TL01/stage.png)\n- 2 Use:\n    新建一个readme.md文件\n    ```\n    $ git add readme.md // 添加文件到暂存区stage，*表示all\n    $ git commit -m \"add readme\" // -m:message， 提交到res\n    [master (root-commit) 99ae527] add readme\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 readme.md\n    ```\n    `file changed` 文件改动 `insertions`插入行数 `deletions`删除行数\n\n###### 3.status与diff \n- 1 Def\n    **status**: 查看仓库当前状态\n    **diff**: 比较修改内容[diff要在add之前使用]\n    **checkout - -与reset HEAD**： 抛弃修改与撤销缓存(回到当前版本)\n- 2 Use\n    修改readme.md，加入:\n        Git is a distributed version control system\n    **2.1.直接查看**\n    ```\n    $ git status\n    On branch master\n    Changes not staged for commit:\n        (use \"git add <file>...\" to update what will be committed)\n        (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   readme.md\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n    ```\n    readme被修改，但是还没有添加到暂存区准备提交。你可添加add到暂存区，同时也可以`checkout --` 抛弃修改。\n\n    **2.2.检查修改内容**\n    ```\n    $ git diff readme.md\n    diff --git a/readme.md b/readme.md\n    index e69de29..45e43ab 100644\n    --- a/readme.md\n    +++ b/readme.md\n    @@ -0,0 +1 @@\n    +Git is a distributed version control system\n    \\ No newline at end of file\n    ```\n\n    **2.3.add并查看**\n    ```\n    $ git add *\n    $ git status\n    On branch master\n    Changes to be committed:\n        (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   readme.md\n    ```\n    status表示 要被提交的修改有 readme.md，同时你也可以用`reset HEAD `取消暂存。\n\n    **2.4.commit并查看**\n    ```\n    $ git commit -m \"add distributed\"\n    [master 51e675a] add distributed\n    1 file changed, 1 insertion(+)\n    $ git status\n    On branch master\n    nothing to commit, working tree clean\n    ```\n    status表示 没有需要提交的修改，工作目录是干净（working tree clean）的。\n\n###### 4.log、reset与reflog\n- 1 Def:\n    **log**: 显示从最近到最远的提交日志\n    **reset**: 重置(回退)版本\n    **reflog**: 显示命令日志\n- 2 Use:\n    情景：三个版本\n    版本1：add distributed\n    ```\n    Git is a distributed version control system.\n    ```\n    版本2：add free\n    ```\n    Git is a distributed version control system.\n    Git is free softwave.\n    ```\n    版本3：append GPL\n    ```\n    Git is a distributed version control system.\n    Git is free softwave distributed under the GPL. \n    ```\n\n    **2.1.查看提交日志**\n    ```\n    $ git log\n    commit 092719a05ea5929fb2a72c990ae3a38a5b0b8129 (HEAD -> master)\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 17:54:32 2019 +0800\n\n        append GPL\n\n    commit 8a74499d95b927245debf21afadf001e621cb948\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 17:53:14 2019 +0800\n\n        add free\n\n    commit 51e675ad6e4a906bd4de3c65ef830b9564864ca4\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 17:39:11 2019 +0800\n\n        add distributed\n    ```\n    通过log 我们可以看到3次提交，最近的一次是append GPL，上一次是add free，最早的一次是add distributed\n\n    <i>简洁化查看提交日志 - -pretty=oneline</i>\n    ```\n    $ git log --pretty=oneline\n    092719a05ea5929fb2a72c990ae3a38a5b0b8129 (HEAD -> master) append GPL\n    8a74499d95b927245debf21afadf001e621cb948 add free\n    51e675ad6e4a906bd4de3c65ef830b9564864ca4 add distributed\n    ```\n    为了解决多人协作版本冲突问题，git采用了SHA1计算出的数字十六进制来表示版本号`commit id`\n    \n    <span id=\"001\"></span>\n    **2.2.版本回退**\n    HEAD 表示当前版本，HEAD^表示上一个版本，上N个版本用HEAD~N表示。\n    现在要从当前版本append GPL 回退到上一个版本 add free\n    ```\n    $ git reset --hard HEAD^ //使用commit id也可以\n    HEAD is now at 8a74499 add free\n\n    $ cat readme.md\n    Git is a distributed version control system.\n    Git is free softwave\n    ```\n    **2.3.回到未来**\n    当经过上一步版本回退后，查看提交日志时，你会发现新的版本已经消失：\n    ```\n    $ git log\n    commit 8a74499d95b927245debf21afadf001e621cb948 (HEAD -> master)\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 17:53:14 2019 +0800\n\n        add free\n\n    commit 51e675ad6e4a906bd4de3c65ef830b9564864ca4\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 17:39:11 2019 +0800\n\n        add distributed\n\n    commit 99ae527b16c7a4fe17c77f383b4bdba54a5f5ceb\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 16:56:38 2019 +0800\n\n        add readme\n    ```\n    那么如何回到未来呢？\n    我们可以通过git 查找到“未来”的版本号,并使用reset 回到未来。\n    ```\n    $ git reflog\n    8a74499 (HEAD -> master) HEAD@{0}: reset: moving to HEAD^\n    092719a HEAD@{1}: commit: append GPL\n    8a74499 (HEAD -> master) HEAD@{2}: commit: add free\n    51e675a HEAD@{3}: commit: add distributed\n    \n    $ git reset --hard 092719a\n    HEAD is now at 092719a append GPL\n    ```\n<span id=\"002\"></span>\n\n##### remote\n###### 1.SSH Key\n- 1 创建SSH Key\n    ```\n    $ ssh-keygen -t rsa -C \"youremail@example.com\"\n    ```\n    一路回车使用默认值\n    通过查看电脑用户目录下`.ssh`目录,其中\n    `id_rsa` 为私钥，`id_rsa.pub`为公钥。\n- 2 添加SSH Key\n    登录Github->Account Settings->SSH Keys->Add SSH Key\n    添加id_rsa.pub内容，Title任意。\n    ![SSHKEY](TL01/SSHkey.png)\n- Github SSH Key 的意义\n    因为GitHub需要识别出你的身份，才能允许你推送提交(Push)，而Git支持SSH协议，因此SSH Key是必要的。\n\n###### 2.本地到远程\n- 1 添加远程库\n    情景：本地创建了仓库myres，需要在Github上建立远程仓库。\n    **步骤一**： Github创建同名仓库\n    **步骤二**： 在本地仓库下与Github仓库关联\n    ```\n    $ git remote add origin git@github.com:username/resname.git // origin 是git默认远程库叫法\n    ```\n    Ps:这里需要将SSH KEY添加到账号/仓库中，否则只是关联，无法推送\n    **步骤三**： 推送本地仓库内容到远程库\n    ```\n    $ git push -u origin master\n    Counting objects: 20, done.\n    Delta compression using up to 4 threads.\n    Compressing objects: 100% (15/15), done.\n    Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.\n    Total 20 (delta 5), reused 0 (delta 0)\n    remote: Resolving deltas: 100% (5/5), done.\n    To github.com:username/resname.git\n    * [new branch]      master -> master\n    Branch 'master' set up to track remote branch 'master' from 'origin'.\n    ```\n    Ps:第一次推送时,使用`git push` 实际上是把master 推送到了远程库，而加上`-u`参数不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n- 2 Push 推送\n    **Def**: 将本地master分支**提交后**的最新修改推送至GitHub\n    **Use**:\n    ```\n    $ git push origin master\n    ```\n\n###### 3.远程到本地\n- 1 克隆远程库\n    情景：已经有了GitHub远程库，想要在本地建立仓库。\n    **步骤一**：获取远程库地址\n    **步骤二**：克隆远程库到本地\n    ```\n    $ git clone git@github.com:username/remotename.git\n    Cloning into 'remotename'...\n    remote: Counting objects: 3, done.\n    remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3\n    Receiving objects: 100% (3/3), done.\n    ```\n    此时本地就有了远程仓库的所有文件\n    Ps: 远程库地址有两种：\n    1.git:// 默认使用ssh\n    2.https 但速度慢，并且每次推送需要输入口令\n    很多只开放http端口的公司只能使用https，而不使用ssh协议\n\n- 2 Pull 拉取\n    **Def**: 将GitHub远程库当前版本拉取到本地\n    **Use**:\n    ```\n    $ git pull \n    ```\n###### SSH警告\n-   当第一次使用clone|push连接Github时，会得到一个警告：\n    \n    ```\n    The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.\n    RSA key fingerprint is xx.xx.xx.xx.xx.\n    Are you sure you want to continue connecting (yes/no)?\n    ```\n    这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入`yes`回车即可。\n    Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：\n    \n    ```\n    Warning: Permanently added 'github.com' (RSA) to the list of known hosts.\n    ```\n\n##### Branch\n###### 1.Def\n-  分支是为了将修改记录的整体流程分叉保存。分叉后的分支不受其他分支的影响，所以在同一个数据库里可以同时进行多个修改。\n-  为了不受其他开发人员的影响，您可以在主分支上建立自己专用的分支。完成工作后，将自己分支上的修改合并到主分支。因为每一次提交的历史记录都会被保存，所以当发生问题时，定位和修改造成问题的提交就容易多了。\n\n###### 2.创建与合并分支\n- 1.Def：\n    在[版本回退](#001),我们知道,每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。\n    目前为止，只有一条主分支`master`，而`HEAD`是指向`master`,`master`才是指向提交的。\n    `HEAD`指向的就是**当前**分支.\n    ![branch01](TL01/branch01.png)\n\n- 2.branch\n    **创建新的分支dev并切换**\n    ```\n    $ git branch dev\n    $ git checkout dev\n    Switched to a new branch 'dev'\n    ```\n    或\n    ```\n    $ git checkout -b dev\n    Switched to a new branch 'dev'\n    ```\n    此时，git新建了一个指针叫`dev`，指向`master`相同的提交，再把`HEAD`指向`dev`，就表示`当前`分支在`dev`上\n    ![branch02](TL01/branch02.png)\n    \n    **修改提交后指针变化**\n    在进入`dev`分支后，工作区的修改和提交就是针对`dev`分支了，比如此时新提交一次，则：\n    ![branch03](TL01/branch03.png)\n\n    **合并分支并删除dev**\n    当`dev`上的工作完成后，将`master`直接指向`dev`当前提交时，便完成了合并\n    ```\n    $ git checkout master //切回master,此时你会发现master里没有dev上更改的文件\n    Switched to branch 'master'\n    $ git merge dev //合并dev. \n    Updating d46f35e..b17d20e\n    Fast-forward\n    readme.txt | 1 +\n    1 file changed, 1 insertion(+)\n    ```\n    `Fast-forward`表示这次合并时快进模式，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n    ![branch04](TL01/branch04.png)\n    ```\n    $ git branch //查看分支，*表示当前分支\n    * dev\n    master\n    $ git branch -d dev //删除dev分支\n    $ git branch \n    * master\n    ```\n    ![branch05](TL01/branch05.png)\n\n###### 3.解决冲突\n- 1 Def:\n    **conflict**：冲突，同一处不同的修改合并产生的冲突。\n- 2 Solution:\n    情景：\n    `feature1`分支 提交修改了readme.md\n    ```\n    Creating a new branch is quick AND simple\n    ```\n    ```\n    $ git add *\n    $ git commit -m \"AND\"\n    [feature1 c5584de] AND\n    1 file changed, 1 insertion(+), 2 deletions(-)\n    ```\n    `master`分支 提交修改了readme.md\n    ```\n    Creating a new branch is quick & simple\n    ```\n    ```\n    $ git add *\n    $ git commit -m \"&\"\n    [master 59d6553] &\n    1 file changed, 1 insertion(+), 2 deletions(-)\n    ```\n    `merge`命令 合并时：\n    ```\n    $ git merge feature1\n    Auto-merging readme.md\n    CONFLICT (content): Merge conflict in readme.md\n    Automatic merge failed; fix conflicts and then commit the result.\n    ```\n    Git告诉我们readme.md发生了冲突，我们也可以通过status查看\n    ```\n    $ git status\n    On branch master\n    You have unmerged paths.\n    (fix conflicts and run \"git commit\")\n    (use \"git merge --abort\" to abort the merge)\n\n    Unmerged paths:\n    (use \"git add <file>...\" to mark resolution)\n\n            both modified:   readme.md\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n    ```\n\n    我们打开readme.md\n    ```\n    <<<<<<< HEAD\n    Creating a new branch is quick & simple\n    =======\n    Creating a new branch is quick AND simple\n    >>>>>>> feature1   \n    ```\n    Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容\n    \n    我们修改后保存再提交：\n    ```\n    Creating a new branch is quick AND simple\n    ```\n    ```\n    $ git add readme.md\n    $ git commit -m \"conflict fixed\"\n    [master ec49478] conflict fixed\n    ```\n    ![branch06](TL01/branch06.png)\n    通过`log`查看分支合并情况：\n    ```\n    $ git log --graph --pretty=oneline --abbrev-commit //git log --graph命令可以看到分支合并图\n    *   ec49478 (HEAD -> master) conflict fixed\n    |\\\n    | * c5584de (feature1) AND\n    * | 59d6553 &\n    |/\n    * 092719a append GPL\n    * 8a74499 add free“\n    * 51e675a add distributed\n    * 99ae527 add readme\n    $ git branch -d feature1 //最后删除分支\n    Deleted branch feature1 (was c5584de).\n    ```\n\n###### 4.分支管理策略\n- 1 Def:\n    合并分支时，通常如果可能(不发生冲突),Git会默认使用`Fast forward`模式，但是这种模式下，删除分支后，会丢失分支信息。\n    ![branch04](TL01/branch04.png)\n    ![branch05](TL01/branch05.png)\n    如果要强制禁用`Fast forward`模式，Git会在`merge`时生成一个新的commit，这样就可以从分支历史上看出分支信息\n    即类似下面合并后：\n    ![branch06](TL01/branch06.png)\n\n- 2 Use:`--no-ff`\n    ```\n    $ git merge --no-ff -m \"merge with on-ff\" dev \n    Merge made by the 'recursive' strategy.\n    readme.md | 2 +-\n    1 file changed, 1 insertion(+), 1 deletion(-)\n    $ git log --graph --pretty=oneline --abbrev-commit\n    *   f0fcabe (HEAD -> master) merge with no-ff\n    |\\\n    | * ee54c4c (dev) add merge\n    |/\n    *   ec49478 conflict fixed\n\n    ```\n\n- 3 实际开发\n    master分支仅用来发布新版本，是非常稳定的。\n    dev分支上进行开发，是不稳定的。\n    比如1.0版本发布时，先把dev分支合并到master上，再在master分支发布1.0版本；\n    而你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。\n\n    ![此图来自廖雪峰Git教程](TL01/branch07.png)\n    \n###### Bug与Feature分支\n- 1 Bug分支\n    Def: 每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。\n    情景： 你遇到一个代号404的bug，打算创建临时分支`issue-404`来修复，但`dev`上工作进行了一半还没提交。\n    **步骤一**：`stash`储存工作现场\n    ```\n    $ git stash\n    Saved working directory and index state WIP on dev: f0fcabe merge with no-ff\n    ```\n    **步骤二**： 从指定分支创建临时修复bug分支\n    ```\n    $ git checkout master\n    Switched to branch 'master'\n    $ git checkout -b issue-404\n    Switched to a new branch 'issue-404'\n    ```\n    **步骤三**：修复bug\n    ```\n    $ git add *\n    $ git commit -m \"fix bug 404\"\n    [issue-404 d9abeeb] fix bug 404\n     1 file changed, 1 insertion(+), 1 deletion(-)\n    ```\n    **步骤四**：合并分支并删除bug分支\n    ```\n    $ git checkout master\n    Switched to branch 'master'\n    $ git merge --no-ff -m \"merged bug fix 404\" issue-404\n    Merge made by the 'recursive' strategy.\n    readme.md | 2 +-\n    1 file changed, 1 insertion(+), 1 deletion(-)\n    $ git branch -d issue-404\n    Deleted branch issue-404 (was d9abeeb).\n    $ git checkout dev\n    Switched to branch 'dev'\n    $ git status\n    On branch dev\n    nothing to commit, working tree clean\n    ```\n    **步骤五**：`stash apply+drop /pop`恢复工作现场\n    ```\n    $ git stash list\n    stash@{0}: WIP on dev:  f0fcabe merge with no-ff\n    $ git stash pop //恢复同时删除stash内容，apply stash@{0}只是恢复，需要drop stash@{0}:删除\n    On branch dev\n    Changes to be committed:\n    (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   hello.py\n\n    Changes not staged for commit:\n    (use \"git add <file>...\" to update what will be committed)\n    (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   readme.txt\n\n    Dropped refs/stash@{0} (5d677e2ee266f39ea296182fb2354265b91b3b2a)\n    $ git stash list //检查\n    ```\n- 2 feature分支\n    Def: 在软件开发过程中，添加一个新功能时，肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支\n    情景一：开发完成，合并分支，删除分支，顺利完成。\n    情景二：功能叫停，含机密资料的分支必须销毁\n    ```\n    $ git branch -d feature-x\n    error: The branch 'feature-x' is not fully merged.\n    If you are sure you want to delete it, run 'git branch -D feature-x'.\n    ```\n    分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的`-D`参数。\n    ```\n    $ git branch -D feature-x\n    Deleted branch feature-x (was 287773e).\n    ```\n\n###### 多人协作与Rebase\n- 1 Def： \n    在[remote](#002),我们学习了Push(推送)、PUll(拉取)，这里具体介绍多人协作时使用。\n\n- 2 Remote远程库信息：\n    ```\n    $ git remote -v\n    origin  git@github.com:username/resname.git (fetch)\n    origin  git@github.com:username/resname.git (push)\n    ```\n    上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址\n\n- 3 Push 推送分支\n    ```\n    $ git push origin branch-name\n    ```\n    `master`分支是主分支，因此要时刻与远程同步；\n    `dev`分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步。\n    `bug`分支只用于在本地修复bug，就没必要推到远程了。\n    `feature`分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n- 4 Pull/Clone 抓取分支\n    多人协作时，大家都会往`master`和`dev`分支上推送各自的修改,但是从远程库clone时，默认只能看到本地的`master`\n    但是需要在`dev`进行开发，所以必须创建远程origin/dev分支关联：\n    ```\n    $ git checkout -b dev origin/dev\n    ```\n    在你修改提交`dev`后试图推送时，发现你的小伙伴已经推送了他的`dev`提交：\n    ```\n    $ git push origin dev\n    To github.com:username/resname.git\n    ! [rejected]        dev -> dev (non-fast-forward)\n    error: failed to push some refs to 'git@github.com:username/resname.git'\n    hint: Updates were rejected because the tip of your current branch is behind\n    hint: its remote counterpart. Integrate the remote changes (e.g.\n    hint: 'git pull ...') before pushing again.\n    hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n    ```\n    推送失败，这时候你需要将最新的提交`拉取`下来，在本地`合并`后`解除冲突`，再`推送`:\n    ```\n    $ git pull\n    There is no tracking information for the current branch.\n    Please specify which branch you want to merge with.\n    See git-pull(1) for details.\n\n        git pull <remote> <branch>\n\n    If you wish to set tracking information for this branch you can do so with:\n\n        git branch --set-upstream-to=origin/<branch> dev\n    ```\n    拉取失败？这是因为**没有指定本地dev分支与远程origin/dev分支的链接**:\n    ```\n    $ git branch --set-upstream-to=origin/dev dev\n    Branch 'dev' set up to track remote branch 'dev' from 'origin'.\n    ```\n    链接完成后再进行相应操作：Pull->merge->fix conflict->Push\n\n- 5 实际开发\n    - 首先，可以试图用git push origin branch-name推送自己的修改；\n    - 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n    - 如果合并有冲突，则解决冲突，并在本地提交；\n    - 没有冲突或者解决掉冲突后，再用git push origin branch-name送就能成功\n    - 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to branch-name origin/branch-name。\n\n- 6 rebase\n    Def: 多人在同一个分支上协作时,很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功,此时提交历史非常凌乱，为了解决这个问题，Git提供了`Rebase`変基。\n    Use:\n    - 在Push之前，通过rebase 进行提交历史的整理。\n    rebase操作可以把本地未push的分叉提交历史整理成直线；\n    rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。\n\n###### tag\n- 1 Def:\n    发布一个版本时，我们通常先在版本库中打一个标签（tag），将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来，所以标签也是版本库的一个快照。\n- 2 Use:\n    ```\n    $ git tag name //默认标签是打在最新提交的commit上的\n    $ git tag name commit_id //也可以先log查看commit,打在之前的版本上。\n    $ git tag //查看标签\n    $ git show tagname //查看具体的标签信息(提交id，作者，日期等)\n    $ git tag -a v0.1 -m \"version 0.1 released\" 1094adb\n\n    $ git tag -d name //删除\n    $ git push origin tagname //推送标签到远程\n    $ git push origin --tags //推送所有标签\n\n    $ git tag -d v0.9 //先删除本地标签\n    $ git push origin :refs/tags/v0.9 从远程删除，也是push命令\n    ```\n    标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。\n\n##### 其他\n###### Pull Request\n- TODO\n\n###### Git 服务器搭建\n- TODO\n\n\n参考资料：\n- 1 [Git & GitHub Crash Course For Beginners](https://www.youtube.com/watch?v=SWYqp7iY_Tc)\n- 2 [廖雪峰Git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n- 3 [猴子都能懂得GIT入门](https://backlog.com/git-tutorial/cn/)\n\n","source":"_posts/TL01.md","raw":"---\ntitle: Git\ncomments: true\ntags:\n- Tools\ncategories:\n- CODE\n---\n##### 为什么学Git?\n- 1 工欲善其事，必先利其器\n- 2 Def：`distributed` Version Control System(VCS) for tracking changes in computer files\n- 3 His:　\n    &nbsp;&nbsp;&nbsp;Linus->Linux (1991)：diff+Linus手工合并代码:CVS\\SVN集中式速度慢,商用版不符合开源精神\n    &nbsp;&nbsp;&nbsp;2002：BitKeeper(BitMover)授权Linux社区免费使用\n    &nbsp;&nbsp;&nbsp;2005：Andrew(Samba开发者)试图破解BitKeeper协议，收回。\n    &nbsp;&nbsp;&nbsp;Linus->Git(by C) in two weeks\n    &nbsp;&nbsp;&nbsp;2008:GitHub\n\n\n##### Install \n- 1 win: https://git-scm.com/download/win\n\n##### Basic commands\n```\n$ git init   // initialize Local Git Repository \n$ git add<file>  // Add File(s) To Index\n$ git status  // Check Status of Working Tree\n$ git commit  // Commit Changes In Index\n$ git push   //Push to Remote Repository\n$ git pull    //Pull Latest From Remote Repository\n$ git clone  //clone Repository into a new Directory\n```\n<!-- more -->\n\n##### Use\n###### 1.init \n- 1 Def repository:一个可以被Git管理、追踪(`Changes`文件的修改、删除、添加)的仓库，以便将来可以“还原”。\n- 2 Use:\n    ```\n    $ mkdir myres //创建文件目录\n    $ cd myres  //进入文件夹\n    $ git init  //初始化仓库(将文件夹转为Git仓库)\n    Initialized empty Git repository in ../myres/.git\n    ```\n\n###### 2.add与commit \n- 1 Def \n    **add**: 将工作区文件添加到暂存区(Index/stage)\n    **commit**: 提交添加(将文件从暂存区stage提交到版本库)\n    **rm**: 删除文件\n![s](TL01/stage.png)\n- 2 Use:\n    新建一个readme.md文件\n    ```\n    $ git add readme.md // 添加文件到暂存区stage，*表示all\n    $ git commit -m \"add readme\" // -m:message， 提交到res\n    [master (root-commit) 99ae527] add readme\n    1 file changed, 0 insertions(+), 0 deletions(-)\n    create mode 100644 readme.md\n    ```\n    `file changed` 文件改动 `insertions`插入行数 `deletions`删除行数\n\n###### 3.status与diff \n- 1 Def\n    **status**: 查看仓库当前状态\n    **diff**: 比较修改内容[diff要在add之前使用]\n    **checkout - -与reset HEAD**： 抛弃修改与撤销缓存(回到当前版本)\n- 2 Use\n    修改readme.md，加入:\n        Git is a distributed version control system\n    **2.1.直接查看**\n    ```\n    $ git status\n    On branch master\n    Changes not staged for commit:\n        (use \"git add <file>...\" to update what will be committed)\n        (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   readme.md\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n    ```\n    readme被修改，但是还没有添加到暂存区准备提交。你可添加add到暂存区，同时也可以`checkout --` 抛弃修改。\n\n    **2.2.检查修改内容**\n    ```\n    $ git diff readme.md\n    diff --git a/readme.md b/readme.md\n    index e69de29..45e43ab 100644\n    --- a/readme.md\n    +++ b/readme.md\n    @@ -0,0 +1 @@\n    +Git is a distributed version control system\n    \\ No newline at end of file\n    ```\n\n    **2.3.add并查看**\n    ```\n    $ git add *\n    $ git status\n    On branch master\n    Changes to be committed:\n        (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   readme.md\n    ```\n    status表示 要被提交的修改有 readme.md，同时你也可以用`reset HEAD `取消暂存。\n\n    **2.4.commit并查看**\n    ```\n    $ git commit -m \"add distributed\"\n    [master 51e675a] add distributed\n    1 file changed, 1 insertion(+)\n    $ git status\n    On branch master\n    nothing to commit, working tree clean\n    ```\n    status表示 没有需要提交的修改，工作目录是干净（working tree clean）的。\n\n###### 4.log、reset与reflog\n- 1 Def:\n    **log**: 显示从最近到最远的提交日志\n    **reset**: 重置(回退)版本\n    **reflog**: 显示命令日志\n- 2 Use:\n    情景：三个版本\n    版本1：add distributed\n    ```\n    Git is a distributed version control system.\n    ```\n    版本2：add free\n    ```\n    Git is a distributed version control system.\n    Git is free softwave.\n    ```\n    版本3：append GPL\n    ```\n    Git is a distributed version control system.\n    Git is free softwave distributed under the GPL. \n    ```\n\n    **2.1.查看提交日志**\n    ```\n    $ git log\n    commit 092719a05ea5929fb2a72c990ae3a38a5b0b8129 (HEAD -> master)\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 17:54:32 2019 +0800\n\n        append GPL\n\n    commit 8a74499d95b927245debf21afadf001e621cb948\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 17:53:14 2019 +0800\n\n        add free\n\n    commit 51e675ad6e4a906bd4de3c65ef830b9564864ca4\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 17:39:11 2019 +0800\n\n        add distributed\n    ```\n    通过log 我们可以看到3次提交，最近的一次是append GPL，上一次是add free，最早的一次是add distributed\n\n    <i>简洁化查看提交日志 - -pretty=oneline</i>\n    ```\n    $ git log --pretty=oneline\n    092719a05ea5929fb2a72c990ae3a38a5b0b8129 (HEAD -> master) append GPL\n    8a74499d95b927245debf21afadf001e621cb948 add free\n    51e675ad6e4a906bd4de3c65ef830b9564864ca4 add distributed\n    ```\n    为了解决多人协作版本冲突问题，git采用了SHA1计算出的数字十六进制来表示版本号`commit id`\n    \n    <span id=\"001\"></span>\n    **2.2.版本回退**\n    HEAD 表示当前版本，HEAD^表示上一个版本，上N个版本用HEAD~N表示。\n    现在要从当前版本append GPL 回退到上一个版本 add free\n    ```\n    $ git reset --hard HEAD^ //使用commit id也可以\n    HEAD is now at 8a74499 add free\n\n    $ cat readme.md\n    Git is a distributed version control system.\n    Git is free softwave\n    ```\n    **2.3.回到未来**\n    当经过上一步版本回退后，查看提交日志时，你会发现新的版本已经消失：\n    ```\n    $ git log\n    commit 8a74499d95b927245debf21afadf001e621cb948 (HEAD -> master)\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 17:53:14 2019 +0800\n\n        add free\n\n    commit 51e675ad6e4a906bd4de3c65ef830b9564864ca4\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 17:39:11 2019 +0800\n\n        add distributed\n\n    commit 99ae527b16c7a4fe17c77f383b4bdba54a5f5ceb\n    Author: alazia <alazia@email.com>\n    Date:   Sun Aug 4 16:56:38 2019 +0800\n\n        add readme\n    ```\n    那么如何回到未来呢？\n    我们可以通过git 查找到“未来”的版本号,并使用reset 回到未来。\n    ```\n    $ git reflog\n    8a74499 (HEAD -> master) HEAD@{0}: reset: moving to HEAD^\n    092719a HEAD@{1}: commit: append GPL\n    8a74499 (HEAD -> master) HEAD@{2}: commit: add free\n    51e675a HEAD@{3}: commit: add distributed\n    \n    $ git reset --hard 092719a\n    HEAD is now at 092719a append GPL\n    ```\n<span id=\"002\"></span>\n\n##### remote\n###### 1.SSH Key\n- 1 创建SSH Key\n    ```\n    $ ssh-keygen -t rsa -C \"youremail@example.com\"\n    ```\n    一路回车使用默认值\n    通过查看电脑用户目录下`.ssh`目录,其中\n    `id_rsa` 为私钥，`id_rsa.pub`为公钥。\n- 2 添加SSH Key\n    登录Github->Account Settings->SSH Keys->Add SSH Key\n    添加id_rsa.pub内容，Title任意。\n    ![SSHKEY](TL01/SSHkey.png)\n- Github SSH Key 的意义\n    因为GitHub需要识别出你的身份，才能允许你推送提交(Push)，而Git支持SSH协议，因此SSH Key是必要的。\n\n###### 2.本地到远程\n- 1 添加远程库\n    情景：本地创建了仓库myres，需要在Github上建立远程仓库。\n    **步骤一**： Github创建同名仓库\n    **步骤二**： 在本地仓库下与Github仓库关联\n    ```\n    $ git remote add origin git@github.com:username/resname.git // origin 是git默认远程库叫法\n    ```\n    Ps:这里需要将SSH KEY添加到账号/仓库中，否则只是关联，无法推送\n    **步骤三**： 推送本地仓库内容到远程库\n    ```\n    $ git push -u origin master\n    Counting objects: 20, done.\n    Delta compression using up to 4 threads.\n    Compressing objects: 100% (15/15), done.\n    Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.\n    Total 20 (delta 5), reused 0 (delta 0)\n    remote: Resolving deltas: 100% (5/5), done.\n    To github.com:username/resname.git\n    * [new branch]      master -> master\n    Branch 'master' set up to track remote branch 'master' from 'origin'.\n    ```\n    Ps:第一次推送时,使用`git push` 实际上是把master 推送到了远程库，而加上`-u`参数不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n- 2 Push 推送\n    **Def**: 将本地master分支**提交后**的最新修改推送至GitHub\n    **Use**:\n    ```\n    $ git push origin master\n    ```\n\n###### 3.远程到本地\n- 1 克隆远程库\n    情景：已经有了GitHub远程库，想要在本地建立仓库。\n    **步骤一**：获取远程库地址\n    **步骤二**：克隆远程库到本地\n    ```\n    $ git clone git@github.com:username/remotename.git\n    Cloning into 'remotename'...\n    remote: Counting objects: 3, done.\n    remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3\n    Receiving objects: 100% (3/3), done.\n    ```\n    此时本地就有了远程仓库的所有文件\n    Ps: 远程库地址有两种：\n    1.git:// 默认使用ssh\n    2.https 但速度慢，并且每次推送需要输入口令\n    很多只开放http端口的公司只能使用https，而不使用ssh协议\n\n- 2 Pull 拉取\n    **Def**: 将GitHub远程库当前版本拉取到本地\n    **Use**:\n    ```\n    $ git pull \n    ```\n###### SSH警告\n-   当第一次使用clone|push连接Github时，会得到一个警告：\n    \n    ```\n    The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.\n    RSA key fingerprint is xx.xx.xx.xx.xx.\n    Are you sure you want to continue connecting (yes/no)?\n    ```\n    这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入`yes`回车即可。\n    Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：\n    \n    ```\n    Warning: Permanently added 'github.com' (RSA) to the list of known hosts.\n    ```\n\n##### Branch\n###### 1.Def\n-  分支是为了将修改记录的整体流程分叉保存。分叉后的分支不受其他分支的影响，所以在同一个数据库里可以同时进行多个修改。\n-  为了不受其他开发人员的影响，您可以在主分支上建立自己专用的分支。完成工作后，将自己分支上的修改合并到主分支。因为每一次提交的历史记录都会被保存，所以当发生问题时，定位和修改造成问题的提交就容易多了。\n\n###### 2.创建与合并分支\n- 1.Def：\n    在[版本回退](#001),我们知道,每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。\n    目前为止，只有一条主分支`master`，而`HEAD`是指向`master`,`master`才是指向提交的。\n    `HEAD`指向的就是**当前**分支.\n    ![branch01](TL01/branch01.png)\n\n- 2.branch\n    **创建新的分支dev并切换**\n    ```\n    $ git branch dev\n    $ git checkout dev\n    Switched to a new branch 'dev'\n    ```\n    或\n    ```\n    $ git checkout -b dev\n    Switched to a new branch 'dev'\n    ```\n    此时，git新建了一个指针叫`dev`，指向`master`相同的提交，再把`HEAD`指向`dev`，就表示`当前`分支在`dev`上\n    ![branch02](TL01/branch02.png)\n    \n    **修改提交后指针变化**\n    在进入`dev`分支后，工作区的修改和提交就是针对`dev`分支了，比如此时新提交一次，则：\n    ![branch03](TL01/branch03.png)\n\n    **合并分支并删除dev**\n    当`dev`上的工作完成后，将`master`直接指向`dev`当前提交时，便完成了合并\n    ```\n    $ git checkout master //切回master,此时你会发现master里没有dev上更改的文件\n    Switched to branch 'master'\n    $ git merge dev //合并dev. \n    Updating d46f35e..b17d20e\n    Fast-forward\n    readme.txt | 1 +\n    1 file changed, 1 insertion(+)\n    ```\n    `Fast-forward`表示这次合并时快进模式，也就是直接把master指向dev的当前提交，所以合并速度非常快。\n    ![branch04](TL01/branch04.png)\n    ```\n    $ git branch //查看分支，*表示当前分支\n    * dev\n    master\n    $ git branch -d dev //删除dev分支\n    $ git branch \n    * master\n    ```\n    ![branch05](TL01/branch05.png)\n\n###### 3.解决冲突\n- 1 Def:\n    **conflict**：冲突，同一处不同的修改合并产生的冲突。\n- 2 Solution:\n    情景：\n    `feature1`分支 提交修改了readme.md\n    ```\n    Creating a new branch is quick AND simple\n    ```\n    ```\n    $ git add *\n    $ git commit -m \"AND\"\n    [feature1 c5584de] AND\n    1 file changed, 1 insertion(+), 2 deletions(-)\n    ```\n    `master`分支 提交修改了readme.md\n    ```\n    Creating a new branch is quick & simple\n    ```\n    ```\n    $ git add *\n    $ git commit -m \"&\"\n    [master 59d6553] &\n    1 file changed, 1 insertion(+), 2 deletions(-)\n    ```\n    `merge`命令 合并时：\n    ```\n    $ git merge feature1\n    Auto-merging readme.md\n    CONFLICT (content): Merge conflict in readme.md\n    Automatic merge failed; fix conflicts and then commit the result.\n    ```\n    Git告诉我们readme.md发生了冲突，我们也可以通过status查看\n    ```\n    $ git status\n    On branch master\n    You have unmerged paths.\n    (fix conflicts and run \"git commit\")\n    (use \"git merge --abort\" to abort the merge)\n\n    Unmerged paths:\n    (use \"git add <file>...\" to mark resolution)\n\n            both modified:   readme.md\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n    ```\n\n    我们打开readme.md\n    ```\n    <<<<<<< HEAD\n    Creating a new branch is quick & simple\n    =======\n    Creating a new branch is quick AND simple\n    >>>>>>> feature1   \n    ```\n    Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容\n    \n    我们修改后保存再提交：\n    ```\n    Creating a new branch is quick AND simple\n    ```\n    ```\n    $ git add readme.md\n    $ git commit -m \"conflict fixed\"\n    [master ec49478] conflict fixed\n    ```\n    ![branch06](TL01/branch06.png)\n    通过`log`查看分支合并情况：\n    ```\n    $ git log --graph --pretty=oneline --abbrev-commit //git log --graph命令可以看到分支合并图\n    *   ec49478 (HEAD -> master) conflict fixed\n    |\\\n    | * c5584de (feature1) AND\n    * | 59d6553 &\n    |/\n    * 092719a append GPL\n    * 8a74499 add free“\n    * 51e675a add distributed\n    * 99ae527 add readme\n    $ git branch -d feature1 //最后删除分支\n    Deleted branch feature1 (was c5584de).\n    ```\n\n###### 4.分支管理策略\n- 1 Def:\n    合并分支时，通常如果可能(不发生冲突),Git会默认使用`Fast forward`模式，但是这种模式下，删除分支后，会丢失分支信息。\n    ![branch04](TL01/branch04.png)\n    ![branch05](TL01/branch05.png)\n    如果要强制禁用`Fast forward`模式，Git会在`merge`时生成一个新的commit，这样就可以从分支历史上看出分支信息\n    即类似下面合并后：\n    ![branch06](TL01/branch06.png)\n\n- 2 Use:`--no-ff`\n    ```\n    $ git merge --no-ff -m \"merge with on-ff\" dev \n    Merge made by the 'recursive' strategy.\n    readme.md | 2 +-\n    1 file changed, 1 insertion(+), 1 deletion(-)\n    $ git log --graph --pretty=oneline --abbrev-commit\n    *   f0fcabe (HEAD -> master) merge with no-ff\n    |\\\n    | * ee54c4c (dev) add merge\n    |/\n    *   ec49478 conflict fixed\n\n    ```\n\n- 3 实际开发\n    master分支仅用来发布新版本，是非常稳定的。\n    dev分支上进行开发，是不稳定的。\n    比如1.0版本发布时，先把dev分支合并到master上，再在master分支发布1.0版本；\n    而你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。\n\n    ![此图来自廖雪峰Git教程](TL01/branch07.png)\n    \n###### Bug与Feature分支\n- 1 Bug分支\n    Def: 每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。\n    情景： 你遇到一个代号404的bug，打算创建临时分支`issue-404`来修复，但`dev`上工作进行了一半还没提交。\n    **步骤一**：`stash`储存工作现场\n    ```\n    $ git stash\n    Saved working directory and index state WIP on dev: f0fcabe merge with no-ff\n    ```\n    **步骤二**： 从指定分支创建临时修复bug分支\n    ```\n    $ git checkout master\n    Switched to branch 'master'\n    $ git checkout -b issue-404\n    Switched to a new branch 'issue-404'\n    ```\n    **步骤三**：修复bug\n    ```\n    $ git add *\n    $ git commit -m \"fix bug 404\"\n    [issue-404 d9abeeb] fix bug 404\n     1 file changed, 1 insertion(+), 1 deletion(-)\n    ```\n    **步骤四**：合并分支并删除bug分支\n    ```\n    $ git checkout master\n    Switched to branch 'master'\n    $ git merge --no-ff -m \"merged bug fix 404\" issue-404\n    Merge made by the 'recursive' strategy.\n    readme.md | 2 +-\n    1 file changed, 1 insertion(+), 1 deletion(-)\n    $ git branch -d issue-404\n    Deleted branch issue-404 (was d9abeeb).\n    $ git checkout dev\n    Switched to branch 'dev'\n    $ git status\n    On branch dev\n    nothing to commit, working tree clean\n    ```\n    **步骤五**：`stash apply+drop /pop`恢复工作现场\n    ```\n    $ git stash list\n    stash@{0}: WIP on dev:  f0fcabe merge with no-ff\n    $ git stash pop //恢复同时删除stash内容，apply stash@{0}只是恢复，需要drop stash@{0}:删除\n    On branch dev\n    Changes to be committed:\n    (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   hello.py\n\n    Changes not staged for commit:\n    (use \"git add <file>...\" to update what will be committed)\n    (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   readme.txt\n\n    Dropped refs/stash@{0} (5d677e2ee266f39ea296182fb2354265b91b3b2a)\n    $ git stash list //检查\n    ```\n- 2 feature分支\n    Def: 在软件开发过程中，添加一个新功能时，肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支\n    情景一：开发完成，合并分支，删除分支，顺利完成。\n    情景二：功能叫停，含机密资料的分支必须销毁\n    ```\n    $ git branch -d feature-x\n    error: The branch 'feature-x' is not fully merged.\n    If you are sure you want to delete it, run 'git branch -D feature-x'.\n    ```\n    分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的`-D`参数。\n    ```\n    $ git branch -D feature-x\n    Deleted branch feature-x (was 287773e).\n    ```\n\n###### 多人协作与Rebase\n- 1 Def： \n    在[remote](#002),我们学习了Push(推送)、PUll(拉取)，这里具体介绍多人协作时使用。\n\n- 2 Remote远程库信息：\n    ```\n    $ git remote -v\n    origin  git@github.com:username/resname.git (fetch)\n    origin  git@github.com:username/resname.git (push)\n    ```\n    上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址\n\n- 3 Push 推送分支\n    ```\n    $ git push origin branch-name\n    ```\n    `master`分支是主分支，因此要时刻与远程同步；\n    `dev`分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步。\n    `bug`分支只用于在本地修复bug，就没必要推到远程了。\n    `feature`分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。\n\n- 4 Pull/Clone 抓取分支\n    多人协作时，大家都会往`master`和`dev`分支上推送各自的修改,但是从远程库clone时，默认只能看到本地的`master`\n    但是需要在`dev`进行开发，所以必须创建远程origin/dev分支关联：\n    ```\n    $ git checkout -b dev origin/dev\n    ```\n    在你修改提交`dev`后试图推送时，发现你的小伙伴已经推送了他的`dev`提交：\n    ```\n    $ git push origin dev\n    To github.com:username/resname.git\n    ! [rejected]        dev -> dev (non-fast-forward)\n    error: failed to push some refs to 'git@github.com:username/resname.git'\n    hint: Updates were rejected because the tip of your current branch is behind\n    hint: its remote counterpart. Integrate the remote changes (e.g.\n    hint: 'git pull ...') before pushing again.\n    hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n    ```\n    推送失败，这时候你需要将最新的提交`拉取`下来，在本地`合并`后`解除冲突`，再`推送`:\n    ```\n    $ git pull\n    There is no tracking information for the current branch.\n    Please specify which branch you want to merge with.\n    See git-pull(1) for details.\n\n        git pull <remote> <branch>\n\n    If you wish to set tracking information for this branch you can do so with:\n\n        git branch --set-upstream-to=origin/<branch> dev\n    ```\n    拉取失败？这是因为**没有指定本地dev分支与远程origin/dev分支的链接**:\n    ```\n    $ git branch --set-upstream-to=origin/dev dev\n    Branch 'dev' set up to track remote branch 'dev' from 'origin'.\n    ```\n    链接完成后再进行相应操作：Pull->merge->fix conflict->Push\n\n- 5 实际开发\n    - 首先，可以试图用git push origin branch-name推送自己的修改；\n    - 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n    - 如果合并有冲突，则解决冲突，并在本地提交；\n    - 没有冲突或者解决掉冲突后，再用git push origin branch-name送就能成功\n    - 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to branch-name origin/branch-name。\n\n- 6 rebase\n    Def: 多人在同一个分支上协作时,很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功,此时提交历史非常凌乱，为了解决这个问题，Git提供了`Rebase`変基。\n    Use:\n    - 在Push之前，通过rebase 进行提交历史的整理。\n    rebase操作可以把本地未push的分叉提交历史整理成直线；\n    rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。\n\n###### tag\n- 1 Def:\n    发布一个版本时，我们通常先在版本库中打一个标签（tag），将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来，所以标签也是版本库的一个快照。\n- 2 Use:\n    ```\n    $ git tag name //默认标签是打在最新提交的commit上的\n    $ git tag name commit_id //也可以先log查看commit,打在之前的版本上。\n    $ git tag //查看标签\n    $ git show tagname //查看具体的标签信息(提交id，作者，日期等)\n    $ git tag -a v0.1 -m \"version 0.1 released\" 1094adb\n\n    $ git tag -d name //删除\n    $ git push origin tagname //推送标签到远程\n    $ git push origin --tags //推送所有标签\n\n    $ git tag -d v0.9 //先删除本地标签\n    $ git push origin :refs/tags/v0.9 从远程删除，也是push命令\n    ```\n    标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。\n\n##### 其他\n###### Pull Request\n- TODO\n\n###### Git 服务器搭建\n- TODO\n\n\n参考资料：\n- 1 [Git & GitHub Crash Course For Beginners](https://www.youtube.com/watch?v=SWYqp7iY_Tc)\n- 2 [廖雪峰Git教程](https://www.liaoxuefeng.com/wiki/896043488029600)\n- 3 [猴子都能懂得GIT入门](https://backlog.com/git-tutorial/cn/)\n\n","slug":"TL01","published":1,"date":"2021-01-11T01:07:59.569Z","updated":"2021-01-13T03:00:02.665Z","layout":"post","photos":[],"link":"","_id":"ckjwdelzn0000b4tx17mueax1","content":"<h5 id=\"为什么学Git\"><a href=\"#为什么学Git\" class=\"headerlink\" title=\"为什么学Git?\"></a>为什么学Git?</h5><ul>\n<li>1 工欲善其事，必先利其器</li>\n<li>2 Def：<code>distributed</code> Version Control System(VCS) for tracking changes in computer files</li>\n<li>3 His:　<br>  &nbsp;&nbsp;&nbsp;Linus-&gt;Linux (1991)：diff+Linus手工合并代码:CVS\\SVN集中式速度慢,商用版不符合开源精神<br>  &nbsp;&nbsp;&nbsp;2002：BitKeeper(BitMover)授权Linux社区免费使用<br>  &nbsp;&nbsp;&nbsp;2005：Andrew(Samba开发者)试图破解BitKeeper协议，收回。<br>  &nbsp;&nbsp;&nbsp;Linus-&gt;Git(by C) in two weeks<br>  &nbsp;&nbsp;&nbsp;2008:GitHub</li>\n</ul>\n<h5 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h5><ul>\n<li>1 win: <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/download/win</a></li>\n</ul>\n<h5 id=\"Basic-commands\"><a href=\"#Basic-commands\" class=\"headerlink\" title=\"Basic commands\"></a>Basic commands</h5><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git init   <span class=\"comment\">// initialize Local Git Repository </span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git add&lt;<span class=\"keyword\">file</span>&gt;  <span class=\"comment\">// Add File(s) To Index</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git status  <span class=\"comment\">// Check Status of Working Tree</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git commit  <span class=\"comment\">// Commit Changes In Index</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git push   <span class=\"comment\">//Push to Remote Repository</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git pull    <span class=\"comment\">//Pull Latest From Remote Repository</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git clone  <span class=\"comment\">//clone Repository into a new Directory</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h5 id=\"Use\"><a href=\"#Use\" class=\"headerlink\" title=\"Use\"></a>Use</h5><h6 id=\"1-init\"><a href=\"#1-init\" class=\"headerlink\" title=\"1.init\"></a>1.init</h6><ul>\n<li>1 Def repository:一个可以被Git管理、追踪(<code>Changes</code>文件的修改、删除、添加)的仓库，以便将来可以“还原”。</li>\n<li>2 Use:  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> mkdir myres <span class=\"comment\">//创建文件目录</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> cd myres  <span class=\"comment\">//进入文件夹</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git init  <span class=\"comment\">//初始化仓库(将文件夹转为Git仓库)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Initialized</span></span> empty Git repository in ../myres/.git</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"2-add与commit\"><a href=\"#2-add与commit\" class=\"headerlink\" title=\"2.add与commit\"></a>2.add与commit</h6><ul>\n<li><p>1 Def<br>  <strong>add</strong>: 将工作区文件添加到暂存区(Index/stage)<br>  <strong>commit</strong>: 提交添加(将文件从暂存区stage提交到版本库)<br>  <strong>rm</strong>: 删除文件<br><img src=\"/2021/01/11/TL01/stage.png\" alt=\"s\"></p>\n</li>\n<li><p>2 Use:<br>  新建一个readme.md文件</p>\n  <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add readme.md <span class=\"comment\">// 添加文件到暂存区stage，*表示all</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"add readme\"</span> <span class=\"comment\">// -m:message， 提交到res</span></span><br><span class=\"line\">[master (root-commit) <span class=\"number\">99</span>ae527] add readme</span><br><span class=\"line\"><span class=\"number\">1</span> file <span class=\"section\">changed</span>, <span class=\"number\">0</span> insertions(+), <span class=\"number\">0</span> deletions(-)</span><br><span class=\"line\">create mode <span class=\"number\">100644</span> readme.md</span><br></pre></td></tr></table></figure>\n\n<p>  <code>file changed</code> 文件改动 <code>insertions</code>插入行数 <code>deletions</code>删除行数</p>\n</li>\n</ul>\n<h6 id=\"3-status与diff\"><a href=\"#3-status与diff\" class=\"headerlink\" title=\"3.status与diff\"></a>3.status与diff</h6><ul>\n<li><p>1 Def<br>  <strong>status</strong>: 查看仓库当前状态<br>  <strong>diff</strong>: 比较修改内容[diff要在add之前使用]<br>  <strong>checkout - -与reset HEAD</strong>： 抛弃修改与撤销缓存(回到当前版本)</p>\n</li>\n<li><p>2 Use<br>  修改readme.md，加入:</p>\n<pre><code>Git is a distributed version control system</code></pre><p>  <strong>2.1.直接查看</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for <span class=\"keyword\">commit</span>:</span><br><span class=\"line\">    (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> what will be committed)</span><br><span class=\"line\">    (<span class=\"keyword\">use</span> <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> discard changes <span class=\"keyword\">in</span> working <span class=\"keyword\">directory</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   readme.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">no</span> changes added <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add\"</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> <span class=\"string\">\"git commit -a\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>  readme被修改，但是还没有添加到暂存区准备提交。你可添加add到暂存区，同时也可以<code>checkout --</code> 抛弃修改。</p>\n<p>  <strong>2.2.检查修改内容</strong></p>\n  <figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff readme.md</span><br><span class=\"line\">diff <span class=\"comment\">--git a/readme.md b/readme.md</span></span><br><span class=\"line\">index e69de29.<span class=\"number\">.45e43</span>ab <span class=\"number\">100644</span></span><br><span class=\"line\"><span class=\"comment\">--- a/readme.md</span></span><br><span class=\"line\">+++ b/readme.md</span><br><span class=\"line\">@@ <span class=\"number\">-0</span>,<span class=\"number\">0</span> +<span class=\"number\">1</span> @@</span><br><span class=\"line\">+Git <span class=\"keyword\">is</span> a distributed <span class=\"built_in\">version</span> control system</span><br><span class=\"line\">\\ No newline <span class=\"keyword\">at</span> <span class=\"keyword\">end</span> <span class=\"keyword\">of</span> <span class=\"built_in\">file</span></span><br></pre></td></tr></table></figure>\n\n<p>  <strong>2.3.add并查看</strong></p>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"builtin-name\">add</span> *</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes <span class=\"keyword\">to</span> be committed:</span><br><span class=\"line\">    (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   readme.md</span><br></pre></td></tr></table></figure>\n\n<p>  status表示 要被提交的修改有 readme.md，同时你也可以用<code>reset HEAD</code>取消暂存。</p>\n<p>  <strong>2.4.commit并查看</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">commit</span> -m <span class=\"string\">\"add distributed\"</span></span><br><span class=\"line\">[<span class=\"keyword\">master</span> <span class=\"number\">51e675</span>a] <span class=\"keyword\">add</span> <span class=\"keyword\">distributed</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">file</span> <span class=\"keyword\">changed</span>, <span class=\"number\">1</span> insertion(+)</span><br><span class=\"line\">$ git <span class=\"keyword\">status</span></span><br><span class=\"line\"><span class=\"keyword\">On</span> branch <span class=\"keyword\">master</span></span><br><span class=\"line\"><span class=\"keyword\">nothing</span> <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span>, working tree clean</span><br></pre></td></tr></table></figure>\n\n<p>  status表示 没有需要提交的修改，工作目录是干净（working tree clean）的。</p>\n</li>\n</ul>\n<h6 id=\"4-log、reset与reflog\"><a href=\"#4-log、reset与reflog\" class=\"headerlink\" title=\"4.log、reset与reflog\"></a>4.log、reset与reflog</h6><ul>\n<li><p>1 Def:<br>  <strong>log</strong>: 显示从最近到最远的提交日志<br>  <strong>reset</strong>: 重置(回退)版本<br>  <strong>reflog</strong>: 显示命令日志</p>\n</li>\n<li><p>2 Use:<br>  情景：三个版本<br>  版本1：add distributed</p>\n  <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git is <span class=\"keyword\">a</span> distributed <span class=\"built_in\">version</span> control <span class=\"keyword\">system</span>.</span><br></pre></td></tr></table></figure>\n\n<p>  版本2：add free</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git <span class=\"keyword\">is</span> <span class=\"keyword\">a</span> distributed <span class=\"keyword\">version</span> control <span class=\"built_in\">system</span>.</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> free softwave.</span><br></pre></td></tr></table></figure>\n\n<p>  版本3：append GPL</p>\n  <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git is <span class=\"keyword\">a</span> distributed <span class=\"built_in\">version</span> control <span class=\"keyword\">system</span>.</span><br><span class=\"line\">Git is free softwave distributed under <span class=\"keyword\">the</span> GPL.</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>2.1.查看提交日志</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">092719</span>a05ea5929fb2a72c990ae3a38a5b0b8129 (<span class=\"keyword\">HEAD</span> -&gt; <span class=\"keyword\">master</span>)</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">17</span>:<span class=\"number\">54</span>:<span class=\"number\">32</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    append GPL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">8</span>a74499d95b927245debf21afadf001e621cb948</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">17</span>:<span class=\"number\">53</span>:<span class=\"number\">14</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">add</span> free</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">51e675</span>ad6e4a906bd4de3c65ef830b9564864ca4</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">17</span>:<span class=\"number\">39</span>:<span class=\"number\">11</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">add</span> <span class=\"keyword\">distributed</span></span><br></pre></td></tr></table></figure>\n\n<p>  通过log 我们可以看到3次提交，最近的一次是append GPL，上一次是add free，最早的一次是add distributed</p>\n<p>  <i>简洁化查看提交日志 - -pretty=oneline</i></p>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log <span class=\"attribute\">--pretty</span>=oneline</span><br><span class=\"line\">092719a05ea5929fb2a72c990ae3a38a5b0b8129 (HEAD -&gt; master) append GPL</span><br><span class=\"line\">8a74499d95b927245debf21afadf001e621cb948 <span class=\"builtin-name\">add</span> free</span><br><span class=\"line\">51e675ad6e4a906bd4de3c65ef830b9564864ca4 <span class=\"builtin-name\">add</span> distributed</span><br></pre></td></tr></table></figure>\n\n<p>  为了解决多人协作版本冲突问题，git采用了SHA1计算出的数字十六进制来表示版本号<code>commit id</code></p>\n<p>  <span id=\"001\"></span><br>  <strong>2.2.版本回退</strong><br>  HEAD 表示当前版本，HEAD^表示上一个版本，上N个版本用HEAD~N表示。<br>  现在要从当前版本append GPL 回退到上一个版本 add free</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard HEAD^ //使用commit id也可以</span></span><br><span class=\"line\"><span class=\"keyword\">HEAD</span> <span class=\"keyword\">is</span> <span class=\"keyword\">now</span> <span class=\"keyword\">at</span> <span class=\"number\">8</span>a74499 <span class=\"keyword\">add</span> free</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat readme.md</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> a <span class=\"keyword\">distributed</span> <span class=\"keyword\">version</span> control system.</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> free softwave</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>2.3.回到未来</strong><br>  当经过上一步版本回退后，查看提交日志时，你会发现新的版本已经消失：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">8</span>a74499d95b927245debf21afadf001e621cb948 (<span class=\"keyword\">HEAD</span> -&gt; <span class=\"keyword\">master</span>)</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">17</span>:<span class=\"number\">53</span>:<span class=\"number\">14</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">add</span> free</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">51e675</span>ad6e4a906bd4de3c65ef830b9564864ca4</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">17</span>:<span class=\"number\">39</span>:<span class=\"number\">11</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">add</span> <span class=\"keyword\">distributed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">99</span>ae527b16c7a4fe17c77f383b4bdba54a5f5ceb</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">16</span>:<span class=\"number\">56</span>:<span class=\"number\">38</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">add</span> readme</span><br></pre></td></tr></table></figure>\n\n<p>  那么如何回到未来呢？<br>  我们可以通过git 查找到“未来”的版本号,并使用reset 回到未来。</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br><span class=\"line\"><span class=\"number\">8</span>a74499 (HEAD -&gt; master) HEAD@&#123;<span class=\"number\">0</span>&#125;: rese<span class=\"variable\">t:</span> moving <span class=\"keyword\">to</span> HEAD^</span><br><span class=\"line\"><span class=\"number\">092719</span><span class=\"keyword\">a</span> HEAD@&#123;<span class=\"number\">1</span>&#125;: commi<span class=\"variable\">t:</span> <span class=\"keyword\">append</span> GPL</span><br><span class=\"line\"><span class=\"number\">8</span>a74499 (HEAD -&gt; master) HEAD@&#123;<span class=\"number\">2</span>&#125;: commi<span class=\"variable\">t:</span> <span class=\"built_in\">add</span> free</span><br><span class=\"line\"><span class=\"number\">51</span>e675a HEAD@&#123;<span class=\"number\">3</span>&#125;: commi<span class=\"variable\">t:</span> <span class=\"built_in\">add</span> distributed</span><br><span class=\"line\"></span><br><span class=\"line\">$ git reset --hard <span class=\"number\">092719</span><span class=\"keyword\">a</span></span><br><span class=\"line\">HEAD <span class=\"keyword\">is</span> now at <span class=\"number\">092719</span><span class=\"keyword\">a</span> <span class=\"keyword\">append</span> GPL</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><span id=\"002\"></span></p>\n<h5 id=\"remote\"><a href=\"#remote\" class=\"headerlink\" title=\"remote\"></a>remote</h5><h6 id=\"1-SSH-Key\"><a href=\"#1-SSH-Key\" class=\"headerlink\" title=\"1.SSH Key\"></a>1.SSH Key</h6><ul>\n<li><p>1 创建SSH Key</p>\n  <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></span><br></pre></td></tr></table></figure>\n\n<p>  一路回车使用默认值<br>  通过查看电脑用户目录下<code>.ssh</code>目录,其中<br>  <code>id_rsa</code> 为私钥，<code>id_rsa.pub</code>为公钥。</p>\n</li>\n<li><p>2 添加SSH Key<br>  登录Github-&gt;Account Settings-&gt;SSH Keys-&gt;Add SSH Key<br>  添加id_rsa.pub内容，Title任意。<br>  <img src=\"/2021/01/11/TL01/SSHkey.png\" alt=\"SSHKEY\"></p>\n</li>\n<li><p>Github SSH Key 的意义<br>  因为GitHub需要识别出你的身份，才能允许你推送提交(Push)，而Git支持SSH协议，因此SSH Key是必要的。</p>\n</li>\n</ul>\n<h6 id=\"2-本地到远程\"><a href=\"#2-本地到远程\" class=\"headerlink\" title=\"2.本地到远程\"></a>2.本地到远程</h6><ul>\n<li><p>1 添加远程库<br>  情景：本地创建了仓库myres，需要在Github上建立远程仓库。<br>  <strong>步骤一</strong>： Github创建同名仓库<br>  <strong>步骤二</strong>： 在本地仓库下与Github仓库关联</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github<span class=\"selector-class\">.com</span>:username/resname<span class=\"selector-class\">.git</span> <span class=\"comment\">// origin 是git默认远程库叫法</span></span><br></pre></td></tr></table></figure>\n\n<p>  Ps:这里需要将SSH KEY添加到账号/仓库中，否则只是关联，无法推送<br>  <strong>步骤三</strong>： 推送本地仓库内容到远程库</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -<span class=\"keyword\">u</span> origin master</span><br><span class=\"line\">Counting object<span class=\"variable\">s:</span> <span class=\"number\">20</span>, done.</span><br><span class=\"line\">Delta compression using <span class=\"keyword\">up</span> <span class=\"keyword\">to</span> <span class=\"number\">4</span> threads.</span><br><span class=\"line\">Compressing object<span class=\"variable\">s:</span> <span class=\"number\">100</span>% (<span class=\"number\">15</span>/<span class=\"number\">15</span>), done.</span><br><span class=\"line\">Writing object<span class=\"variable\">s:</span> <span class=\"number\">100</span>% (<span class=\"number\">20</span>/<span class=\"number\">20</span>), <span class=\"number\">1.64</span> KiB | <span class=\"number\">560.00</span> KiB/s, done.</span><br><span class=\"line\">Total <span class=\"number\">20</span> (delta <span class=\"number\">5</span>), reused <span class=\"number\">0</span> (delta <span class=\"number\">0</span>)</span><br><span class=\"line\">remote: Resolving delta<span class=\"variable\">s:</span> <span class=\"number\">100</span>% (<span class=\"number\">5</span>/<span class=\"number\">5</span>), done.</span><br><span class=\"line\">To github.<span class=\"keyword\">com</span>:username/resname.git</span><br><span class=\"line\">* [<span class=\"keyword\">new</span> branch]      master -&gt; master</span><br><span class=\"line\">Branch <span class=\"string\">'master'</span> <span class=\"keyword\">set</span> <span class=\"keyword\">up</span> <span class=\"keyword\">to</span> track remote branch <span class=\"string\">'master'</span> from <span class=\"string\">'origin'</span>.</span><br></pre></td></tr></table></figure>\n\n<p>  Ps:第一次推送时,使用<code>git push</code> 实际上是把master 推送到了远程库，而加上<code>-u</code>参数不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n</li>\n<li><p>2 Push 推送<br>  <strong>Def</strong>: 将本地master分支<strong>提交后</strong>的最新修改推送至GitHub<br>  <strong>Use</strong>:</p>\n  <figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"3-远程到本地\"><a href=\"#3-远程到本地\" class=\"headerlink\" title=\"3.远程到本地\"></a>3.远程到本地</h6><ul>\n<li><p>1 克隆远程库<br>  情景：已经有了GitHub远程库，想要在本地建立仓库。<br>  <strong>步骤一</strong>：获取远程库地址<br>  <strong>步骤二</strong>：克隆远程库到本地</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git<span class=\"meta\">@github</span>.<span class=\"string\">com:</span>username/remotename.git</span><br><span class=\"line\">Cloning into <span class=\"string\">'remotename'</span>...</span><br><span class=\"line\"><span class=\"string\">remote:</span> Counting <span class=\"string\">objects:</span> <span class=\"number\">3</span>, done.</span><br><span class=\"line\"><span class=\"string\">remote:</span> Total <span class=\"number\">3</span> (delta <span class=\"number\">0</span>), reused <span class=\"number\">0</span> (delta <span class=\"number\">0</span>), pack-reused <span class=\"number\">3</span></span><br><span class=\"line\">Receiving <span class=\"string\">objects:</span> <span class=\"number\">100</span>% (<span class=\"number\">3</span>/<span class=\"number\">3</span>), done.</span><br></pre></td></tr></table></figure>\n\n<p>  此时本地就有了远程仓库的所有文件<br>  Ps: 远程库地址有两种：<br>  1.git:// 默认使用ssh<br>  2.https 但速度慢，并且每次推送需要输入口令<br>  很多只开放http端口的公司只能使用https，而不使用ssh协议</p>\n</li>\n<li><p>2 Pull 拉取<br>  <strong>Def</strong>: 将GitHub远程库当前版本拉取到本地<br>  <strong>Use</strong>:</p>\n  <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"SSH警告\"><a href=\"#SSH警告\" class=\"headerlink\" title=\"SSH警告\"></a>SSH警告</h6><ul>\n<li><p>当第一次使用clone|push连接Github时，会得到一个警告：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity <span class=\"keyword\">of</span> host <span class=\"comment\">'github.com (xx.xx.xx.xx)' can't be established.</span></span><br><span class=\"line\">RSA <span class=\"keyword\">key</span> fingerprint <span class=\"keyword\">is</span> xx.xx.xx.xx.xx.</span><br><span class=\"line\">Are you sure you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n\n<p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。<br>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Permanently added <span class=\"string\">'github.com'</span> (RSA) <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> list <span class=\"keyword\">of</span> known hosts.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"Branch\"><a href=\"#Branch\" class=\"headerlink\" title=\"Branch\"></a>Branch</h5><h6 id=\"1-Def\"><a href=\"#1-Def\" class=\"headerlink\" title=\"1.Def\"></a>1.Def</h6><ul>\n<li>分支是为了将修改记录的整体流程分叉保存。分叉后的分支不受其他分支的影响，所以在同一个数据库里可以同时进行多个修改。</li>\n<li>为了不受其他开发人员的影响，您可以在主分支上建立自己专用的分支。完成工作后，将自己分支上的修改合并到主分支。因为每一次提交的历史记录都会被保存，所以当发生问题时，定位和修改造成问题的提交就容易多了。</li>\n</ul>\n<h6 id=\"2-创建与合并分支\"><a href=\"#2-创建与合并分支\" class=\"headerlink\" title=\"2.创建与合并分支\"></a>2.创建与合并分支</h6><ul>\n<li><p>1.Def：<br>  在<a href=\"#001\">版本回退</a>,我们知道,每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。<br>  目前为止，只有一条主分支<code>master</code>，而<code>HEAD</code>是指向<code>master</code>,<code>master</code>才是指向提交的。<br>  <code>HEAD</code>指向的就是<strong>当前</strong>分支.<br>  <img src=\"/2021/01/11/TL01/branch01.png\" alt=\"branch01\"></p>\n</li>\n<li><p>2.branch<br>  <strong>创建新的分支dev并切换</strong></p>\n  <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch dev</span><br><span class=\"line\">$ git checkout dev</span><br><span class=\"line\">Switched <span class=\"built_in\">to</span> <span class=\"keyword\">a</span> <span class=\"built_in\">new</span> branch <span class=\"string\">'dev'</span></span><br></pre></td></tr></table></figure>\n\n<p>  或</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -<span class=\"selector-tag\">b</span> dev</span><br><span class=\"line\">Switched to <span class=\"selector-tag\">a</span> new branch <span class=\"string\">'dev'</span></span><br></pre></td></tr></table></figure>\n\n<p>  此时，git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示<code>当前</code>分支在<code>dev</code>上<br>  <img src=\"/2021/01/11/TL01/branch02.png\" alt=\"branch02\"></p>\n<p>  <strong>修改提交后指针变化</strong><br>  在进入<code>dev</code>分支后，工作区的修改和提交就是针对<code>dev</code>分支了，比如此时新提交一次，则：<br>  <img src=\"/2021/01/11/TL01/branch03.png\" alt=\"branch03\"></p>\n<p>  <strong>合并分支并删除dev</strong><br>  当<code>dev</code>上的工作完成后，将<code>master</code>直接指向<code>dev</code>当前提交时，便完成了合并</p>\n  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git checkout master <span class=\"comment\">//切回master,此时你会发现master里没有dev上更改的文件</span></span><br><span class=\"line\">Switched to branch <span class=\"string\">'master'</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git merge dev <span class=\"comment\">//合并dev. </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Updating</span></span> d46f35e..b17d20e</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\">readme.txt | <span class=\"number\">1</span> +</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">file</span> changed, <span class=\"number\">1</span> insertion(+)</span><br></pre></td></tr></table></figure>\n\n<p>  <code>Fast-forward</code>表示这次合并时快进模式，也就是直接把master指向dev的当前提交，所以合并速度非常快。<br>  <img src=\"/2021/01/11/TL01/branch04.png\" alt=\"branch04\"></p>\n  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git branch <span class=\"comment\">//查看分支，*表示当前分支</span></span><br><span class=\"line\"><span class=\"comment\">* dev</span></span><br><span class=\"line\">master</span><br><span class=\"line\"><span class=\"symbol\">$</span> git branch -d dev <span class=\"comment\">//删除dev分支</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git branch </span><br><span class=\"line\"><span class=\"comment\">* master</span></span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"/2021/01/11/TL01/branch05.png\" alt=\"branch05\"></p>\n</li>\n</ul>\n<h6 id=\"3-解决冲突\"><a href=\"#3-解决冲突\" class=\"headerlink\" title=\"3.解决冲突\"></a>3.解决冲突</h6><ul>\n<li><p>1 Def:<br>  <strong>conflict</strong>：冲突，同一处不同的修改合并产生的冲突。</p>\n</li>\n<li><p>2 Solution:<br>  情景：<br>  <code>feature1</code>分支 提交修改了readme.md</p>\n  <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating a <span class=\"keyword\">new</span> branch <span class=\"keyword\">is</span> quick <span class=\"keyword\">AND</span> simple</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git add *</span><br><span class=\"line\"><span class=\"symbol\">$</span> git commit -m <span class=\"string\">\"AND\"</span></span><br><span class=\"line\">[feature1 c5584de] <span class=\"keyword\">AND</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">file</span> changed, <span class=\"number\">1</span> insertion(+), <span class=\"number\">2</span> deletions(-)</span><br></pre></td></tr></table></figure>\n\n<p>  <code>master</code>分支 提交修改了readme.md</p>\n  <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating a <span class=\"keyword\">new</span> branch <span class=\"keyword\">is</span> quick &amp; simple</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"&amp;\"</span></span><br><span class=\"line\">[master <span class=\"number\">59</span>d6553] &amp;</span><br><span class=\"line\"><span class=\"number\">1</span> file <span class=\"section\">changed</span>, <span class=\"number\">1</span> insertion(+), <span class=\"number\">2</span> deletions(-)</span><br></pre></td></tr></table></figure>\n\n<p>  <code>merge</code>命令 合并时：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">merge</span> feature1</span><br><span class=\"line\"><span class=\"keyword\">Auto</span>-merging readme.md</span><br><span class=\"line\">CONFLICT (<span class=\"keyword\">content</span>): <span class=\"keyword\">Merge</span> conflict <span class=\"keyword\">in</span> readme.md</span><br><span class=\"line\"><span class=\"keyword\">Automatic</span> <span class=\"keyword\">merge</span> <span class=\"keyword\">failed</span>; fix conflicts and then <span class=\"keyword\">commit</span> the result.</span><br></pre></td></tr></table></figure>\n\n<p>  Git告诉我们readme.md发生了冲突，我们也可以通过status查看</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">You have unmerged paths.</span><br><span class=\"line\">(fix conflicts and run \"git <span class=\"keyword\">commit</span><span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">(use \"</span>git <span class=\"keyword\">merge</span> <span class=\"comment\">--abort\" to abort the merge)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Unmerged paths:</span><br><span class=\"line\">(<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> mark resolution)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">both</span> modified:   readme.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">no</span> changes added <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add\"</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> <span class=\"string\">\"git commit -a\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>  我们打开readme.md</p>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">Creating a new branch is quick &amp; simple</span><br><span class=\"line\">=======</span><br><span class=\"line\">Creating a new branch is quick <span class=\"keyword\">AND</span> simple</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure>\n\n<p>  Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容</p>\n<p>  我们修改后保存再提交：</p>\n  <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating a <span class=\"keyword\">new</span> branch <span class=\"keyword\">is</span> quick <span class=\"keyword\">AND</span> simple</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add readme.md</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"conflict fixed\"</span></span><br><span class=\"line\">[<span class=\"keyword\">master</span> <span class=\"title\">ec49478</span>] conflict fixed</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"/2021/01/11/TL01/branch06.png\" alt=\"branch06\"><br>  通过<code>log</code>查看分支合并情况：</p>\n  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git <span class=\"built-in\">log</span> --graph --pretty=oneline --abbrev-commit <span class=\"comment\">//git log --graph命令可以看到分支合并图</span></span><br><span class=\"line\"><span class=\"comment\">*   ec49478 (HEAD -&gt; master) conflict fixed</span></span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * c5584de (feature1) <span class=\"keyword\">AND</span></span><br><span class=\"line\"><span class=\"comment\">* | 59d6553 &amp;</span></span><br><span class=\"line\">|/</span><br><span class=\"line\"><span class=\"comment\">* 092719a append GPL</span></span><br><span class=\"line\"><span class=\"comment\">* 8a74499 add free“</span></span><br><span class=\"line\"><span class=\"comment\">* 51e675a add distributed</span></span><br><span class=\"line\"><span class=\"comment\">* 99ae527 add readme</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git branch -d feature1 <span class=\"comment\">//最后删除分支</span></span><br><span class=\"line\">Deleted branch feature1 (was c5584de).</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"4-分支管理策略\"><a href=\"#4-分支管理策略\" class=\"headerlink\" title=\"4.分支管理策略\"></a>4.分支管理策略</h6><ul>\n<li><p>1 Def:<br>  合并分支时，通常如果可能(不发生冲突),Git会默认使用<code>Fast forward</code>模式，但是这种模式下，删除分支后，会丢失分支信息。<br>  <img src=\"/2021/01/11/TL01/branch04.png\" alt=\"branch04\"><br>  <img src=\"/2021/01/11/TL01/branch05.png\" alt=\"branch05\"><br>  如果要强制禁用<code>Fast forward</code>模式，Git会在<code>merge</code>时生成一个新的commit，这样就可以从分支历史上看出分支信息<br>  即类似下面合并后：<br>  <img src=\"/2021/01/11/TL01/branch06.png\" alt=\"branch06\"></p>\n</li>\n<li><p>2 Use:<code>--no-ff</code></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">merge</span> <span class=\"comment\">--no-ff -m \"merge with on-ff\" dev </span></span><br><span class=\"line\"><span class=\"keyword\">Merge</span> made <span class=\"keyword\">by</span> the <span class=\"string\">'recursive'</span> strategy.</span><br><span class=\"line\">readme.md | <span class=\"number\">2</span> +-</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">file</span> <span class=\"keyword\">changed</span>, <span class=\"number\">1</span> insertion(+), <span class=\"number\">1</span> deletion(-)</span><br><span class=\"line\">$ git <span class=\"keyword\">log</span> <span class=\"comment\">--graph --pretty=oneline --abbrev-commit</span></span><br><span class=\"line\">*   f0fcabe (<span class=\"keyword\">HEAD</span> -&gt; <span class=\"keyword\">master</span>) <span class=\"keyword\">merge</span> <span class=\"keyword\">with</span> <span class=\"keyword\">no</span>-ff</span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * ee54c4c (dev) <span class=\"keyword\">add</span> <span class=\"keyword\">merge</span></span><br><span class=\"line\">|/</span><br><span class=\"line\">*   ec49478 conflict <span class=\"keyword\">fixed</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3 实际开发<br>  master分支仅用来发布新版本，是非常稳定的。<br>  dev分支上进行开发，是不稳定的。<br>  比如1.0版本发布时，先把dev分支合并到master上，再在master分支发布1.0版本；<br>  而你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p>\n<p>  <img src=\"/2021/01/11/TL01/branch07.png\" alt=\"此图来自廖雪峰Git教程\"></p>\n</li>\n</ul>\n<h6 id=\"Bug与Feature分支\"><a href=\"#Bug与Feature分支\" class=\"headerlink\" title=\"Bug与Feature分支\"></a>Bug与Feature分支</h6><ul>\n<li><p>1 Bug分支<br>  Def: 每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。<br>  情景： 你遇到一个代号404的bug，打算创建临时分支<code>issue-404</code>来修复，但<code>dev</code>上工作进行了一半还没提交。<br>  <strong>步骤一</strong>：<code>stash</code>储存工作现场</p>\n  <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br><span class=\"line\">Saved working directory and index <span class=\"keyword\">state</span> WIP <span class=\"keyword\">on</span> dev: f0fcabe merge with no-ff</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>步骤二</strong>： 从指定分支创建临时修复bug分支</p>\n  <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched <span class=\"built_in\">to</span> branch <span class=\"string\">'master'</span></span><br><span class=\"line\">$ git checkout -b issue<span class=\"number\">-404</span></span><br><span class=\"line\">Switched <span class=\"built_in\">to</span> <span class=\"keyword\">a</span> <span class=\"built_in\">new</span> branch <span class=\"string\">'issue-404'</span></span><br></pre></td></tr></table></figure>\n\n<p>  <strong>步骤三</strong>：修复bug</p>\n  <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"fix bug 404\"</span></span><br><span class=\"line\">[issue<span class=\"number\">-404</span> d9abeeb] fix bug <span class=\"number\">404</span></span><br><span class=\"line\"> <span class=\"number\">1</span> file <span class=\"section\">changed</span>, <span class=\"number\">1</span> insertion(+), <span class=\"number\">1</span> deletion(-)</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>步骤四</strong>：合并分支并删除bug分支</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch 'master'</span><br><span class=\"line\">$ git <span class=\"keyword\">merge</span> <span class=\"comment\">--no-ff -m \"merged bug fix 404\" issue-404</span></span><br><span class=\"line\"><span class=\"keyword\">Merge</span> made <span class=\"keyword\">by</span> the <span class=\"string\">'recursive'</span> strategy.</span><br><span class=\"line\">readme.md | <span class=\"number\">2</span> +-</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">file</span> <span class=\"keyword\">changed</span>, <span class=\"number\">1</span> insertion(+), <span class=\"number\">1</span> deletion(-)</span><br><span class=\"line\">$ git branch -d issue<span class=\"number\">-404</span></span><br><span class=\"line\">Deleted branch issue<span class=\"number\">-404</span> (was d9abeeb).</span><br><span class=\"line\">$ git checkout dev</span><br><span class=\"line\">Switched <span class=\"keyword\">to</span> branch <span class=\"string\">'dev'</span></span><br><span class=\"line\">$ git <span class=\"keyword\">status</span></span><br><span class=\"line\"><span class=\"keyword\">On</span> branch dev</span><br><span class=\"line\"><span class=\"keyword\">nothing</span> <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span>, working tree clean</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>步骤五</strong>：<code>stash apply+drop /pop</code>恢复工作现场</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"keyword\">list</span></span><br><span class=\"line\">stash@&#123;<span class=\"number\">0</span>&#125;: WIP <span class=\"keyword\">on</span> de<span class=\"variable\">v:</span>  f0fcabe merge with <span class=\"keyword\">no</span>-ff</span><br><span class=\"line\">$ git stash <span class=\"keyword\">pop</span> //恢复同时删除stash内容，apply stash@&#123;<span class=\"number\">0</span>&#125;只是恢复，需要<span class=\"keyword\">drop</span> stash@&#123;<span class=\"number\">0</span>&#125;:删除</span><br><span class=\"line\">On branch dev</span><br><span class=\"line\">Changes <span class=\"keyword\">to</span> <span class=\"keyword\">be</span> committed:</span><br><span class=\"line\">(use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"keyword\">file</span>:   hello.<span class=\"keyword\">py</span></span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commi<span class=\"variable\">t:</span></span><br><span class=\"line\">(use <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> what will <span class=\"keyword\">be</span> committed)</span><br><span class=\"line\">(use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> discard <span class=\"keyword\">changes</span> in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Dropped refs/stash@&#123;<span class=\"number\">0</span>&#125; (<span class=\"number\">5</span>d677e2ee266f39ea296182fb2354265b91b3b2a)</span><br><span class=\"line\">$ git stash <span class=\"keyword\">list</span> //检查</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2 feature分支<br>  Def: 在软件开发过程中，添加一个新功能时，肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支<br>  情景一：开发完成，合并分支，删除分支，顺利完成。<br>  情景二：功能叫停，含机密资料的分支必须销毁</p>\n  <figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d feature-x</span><br><span class=\"line\"><span class=\"keyword\">error: </span>The branch 'feature-x' is not fully merged.</span><br><span class=\"line\">If you are sure you want to delete it, run 'git branch -D feature-x'.</span><br></pre></td></tr></table></figure>\n\n<p>  分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数。</p>\n  <figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-D feature-x</span><br><span class=\"line\"><span class=\"symbol\">Deleted</span> <span class=\"keyword\">branch </span>feature-x (was <span class=\"number\">287773</span>e).</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"多人协作与Rebase\"><a href=\"#多人协作与Rebase\" class=\"headerlink\" title=\"多人协作与Rebase\"></a>多人协作与Rebase</h6><ul>\n<li><p>1 Def：<br>  在<a href=\"#002\">remote</a>,我们学习了Push(推送)、PUll(拉取)，这里具体介绍多人协作时使用。</p>\n</li>\n<li><p>2 Remote远程库信息：</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  git@github<span class=\"selector-class\">.com</span>:username/resname<span class=\"selector-class\">.git</span> (fetch)</span><br><span class=\"line\">origin  git@github<span class=\"selector-class\">.com</span>:username/resname<span class=\"selector-class\">.git</span> (push)</span><br></pre></td></tr></table></figure>\n\n<p>  上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址</p>\n</li>\n<li><p>3 Push 推送分支</p>\n  <figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> branch-name</span><br></pre></td></tr></table></figure>\n\n<p>  <code>master</code>分支是主分支，因此要时刻与远程同步；<br>  <code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步。<br>  <code>bug</code>分支只用于在本地修复bug，就没必要推到远程了。<br>  <code>feature</code>分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>\n</li>\n<li><p>4 Pull/Clone 抓取分支<br>  多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改,但是从远程库clone时，默认只能看到本地的<code>master</code><br>  但是需要在<code>dev</code>进行开发，所以必须创建远程origin/dev分支关联：</p>\n  <figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b <span class=\"built_in\">dev</span> origin/<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n\n<p>  在你修改提交<code>dev</code>后试图推送时，发现你的小伙伴已经推送了他的<code>dev</code>提交：</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">To github<span class=\"selector-class\">.com</span>:username/resname.git</span><br><span class=\"line\">! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class=\"line\">error: failed to push some refs to <span class=\"string\">'git@github.com:username/resname.git'</span></span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Integrate the remote changes (e<span class=\"selector-class\">.g</span>.</span><br><span class=\"line\">hint: <span class=\"string\">'git pull ...'</span>) before pushing again.</span><br><span class=\"line\">hint: See the <span class=\"string\">'Note about fast-forwards'</span> <span class=\"keyword\">in</span> <span class=\"string\">'git push --help'</span> <span class=\"keyword\">for</span> <span class=\"selector-tag\">details</span>.</span><br></pre></td></tr></table></figure>\n\n<p>  推送失败，这时候你需要将最新的提交<code>拉取</code>下来，在本地<code>合并</code>后<code>解除冲突</code>，再<code>推送</code>:</p>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">There is <span class=\"literal\">no</span><span class=\"built_in\"> tracking </span>information <span class=\"keyword\">for</span> the current branch.</span><br><span class=\"line\">Please specify which branch you want <span class=\"keyword\">to</span> merge with.</span><br><span class=\"line\">See git-pull(1) <span class=\"keyword\">for</span> details.</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">If</span> you wish <span class=\"keyword\">to</span> <span class=\"builtin-name\">set</span><span class=\"built_in\"> tracking </span>information <span class=\"keyword\">for</span> this branch you can <span class=\"keyword\">do</span> so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch <span class=\"attribute\">--set-upstream-to</span>=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure>\n\n<p>  拉取失败？这是因为<strong>没有指定本地dev分支与远程origin/dev分支的链接</strong>:</p>\n  <figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --<span class=\"keyword\">set</span>-upstream-<span class=\"keyword\">to</span>=origin/dev dev</span><br><span class=\"line\">Branch <span class=\"string\">'dev'</span> <span class=\"keyword\">set</span> up <span class=\"keyword\">to</span> track remote branch <span class=\"string\">'dev'</span> <span class=\"keyword\">from</span> <span class=\"string\">'origin'</span>.</span><br></pre></td></tr></table></figure>\n\n<p>  链接完成后再进行相应操作：Pull-&gt;merge-&gt;fix conflict-&gt;Push</p>\n</li>\n<li><p>5 实际开发</p>\n<ul>\n<li>首先，可以试图用git push origin branch-name推送自己的修改；</li>\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li>\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\n<li>没有冲突或者解决掉冲突后，再用git push origin branch-name送就能成功</li>\n<li>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to branch-name origin/branch-name。</li>\n</ul>\n</li>\n<li><p>6 rebase<br>  Def: 多人在同一个分支上协作时,很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功,此时提交历史非常凌乱，为了解决这个问题，Git提供了<code>Rebase</code>変基。<br>  Use:</p>\n<ul>\n<li>在Push之前，通过rebase 进行提交历史的整理。<br>rebase操作可以把本地未push的分叉提交历史整理成直线；<br>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h6><ul>\n<li><p>1 Def:<br>  发布一个版本时，我们通常先在版本库中打一个标签（tag），将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来，所以标签也是版本库的一个快照。</p>\n</li>\n<li><p>2 Use:</p>\n  <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">name</span> //默认标签是打在最新提交的commit上的</span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">name</span> commit_id //也可以先log查看commit,打在之前的版本上。</span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">//查看标签</span></span><br><span class=\"line\"><span class=\"title\">$</span> git show tagname //查看具体的标签信息(提交id，作者，日期等)</span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> v0.<span class=\"number\">1</span> -m <span class=\"string\">\"version 0.1 released\"</span> <span class=\"number\">1094</span>adb</span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-d</span> name //删除</span><br><span class=\"line\">$ git push origin tagname //推送标签到远程</span><br><span class=\"line\">$ git push origin --tags //推送所有标签</span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-d</span> v0.<span class=\"number\">9</span> //先删除本地标签</span><br><span class=\"line\">$ git push origin :refs/tags/v0.<span class=\"number\">9</span> 从远程删除，也是push命令</span><br></pre></td></tr></table></figure>\n\n<p>  标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p>\n</li>\n</ul>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><h6 id=\"Pull-Request\"><a href=\"#Pull-Request\" class=\"headerlink\" title=\"Pull Request\"></a>Pull Request</h6><ul>\n<li>TODO</li>\n</ul>\n<h6 id=\"Git-服务器搭建\"><a href=\"#Git-服务器搭建\" class=\"headerlink\" title=\"Git 服务器搭建\"></a>Git 服务器搭建</h6><ul>\n<li>TODO</li>\n</ul>\n<p>参考资料：</p>\n<ul>\n<li>1 <a href=\"https://www.youtube.com/watch?v=SWYqp7iY_Tc\" target=\"_blank\" rel=\"noopener\">Git &amp; GitHub Crash Course For Beginners</a></li>\n<li>2 <a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰Git教程</a></li>\n<li>3 <a href=\"https://backlog.com/git-tutorial/cn/\" target=\"_blank\" rel=\"noopener\">猴子都能懂得GIT入门</a></li>\n</ul>\n","site":{"data":{}},"length":15008,"excerpt":"<h5 id=\"为什么学Git\"><a href=\"#为什么学Git\" class=\"headerlink\" title=\"为什么学Git?\"></a>为什么学Git?</h5><ul>\n<li>1 工欲善其事，必先利其器</li>\n<li>2 Def：<code>distributed</code> Version Control System(VCS) for tracking changes in computer files</li>\n<li>3 His:　<br>  &nbsp;&nbsp;&nbsp;Linus-&gt;Linux (1991)：diff+Linus手工合并代码:CVS\\SVN集中式速度慢,商用版不符合开源精神<br>  &nbsp;&nbsp;&nbsp;2002：BitKeeper(BitMover)授权Linux社区免费使用<br>  &nbsp;&nbsp;&nbsp;2005：Andrew(Samba开发者)试图破解BitKeeper协议，收回。<br>  &nbsp;&nbsp;&nbsp;Linus-&gt;Git(by C) in two weeks<br>  &nbsp;&nbsp;&nbsp;2008:GitHub</li>\n</ul>\n<h5 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h5><ul>\n<li>1 win: <a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/download/win</a></li>\n</ul>\n<h5 id=\"Basic-commands\"><a href=\"#Basic-commands\" class=\"headerlink\" title=\"Basic commands\"></a>Basic commands</h5><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git init   <span class=\"comment\">// initialize Local Git Repository </span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git add&lt;<span class=\"keyword\">file</span>&gt;  <span class=\"comment\">// Add File(s) To Index</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git status  <span class=\"comment\">// Check Status of Working Tree</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git commit  <span class=\"comment\">// Commit Changes In Index</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git push   <span class=\"comment\">//Push to Remote Repository</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git pull    <span class=\"comment\">//Pull Latest From Remote Repository</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git clone  <span class=\"comment\">//clone Repository into a new Directory</span></span><br></pre></td></tr></table></figure>","more":"<h5 id=\"Use\"><a href=\"#Use\" class=\"headerlink\" title=\"Use\"></a>Use</h5><h6 id=\"1-init\"><a href=\"#1-init\" class=\"headerlink\" title=\"1.init\"></a>1.init</h6><ul>\n<li>1 Def repository:一个可以被Git管理、追踪(<code>Changes</code>文件的修改、删除、添加)的仓库，以便将来可以“还原”。</li>\n<li>2 Use:  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> mkdir myres <span class=\"comment\">//创建文件目录</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> cd myres  <span class=\"comment\">//进入文件夹</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git init  <span class=\"comment\">//初始化仓库(将文件夹转为Git仓库)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Initialized</span></span> empty Git repository in ../myres/.git</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"2-add与commit\"><a href=\"#2-add与commit\" class=\"headerlink\" title=\"2.add与commit\"></a>2.add与commit</h6><ul>\n<li><p>1 Def<br>  <strong>add</strong>: 将工作区文件添加到暂存区(Index/stage)<br>  <strong>commit</strong>: 提交添加(将文件从暂存区stage提交到版本库)<br>  <strong>rm</strong>: 删除文件<br><img src=\"/2021/01/11/TL01/stage.png\" alt=\"s\"></p>\n</li>\n<li><p>2 Use:<br>  新建一个readme.md文件</p>\n  <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add readme.md <span class=\"comment\">// 添加文件到暂存区stage，*表示all</span></span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"add readme\"</span> <span class=\"comment\">// -m:message， 提交到res</span></span><br><span class=\"line\">[master (root-commit) <span class=\"number\">99</span>ae527] add readme</span><br><span class=\"line\"><span class=\"number\">1</span> file <span class=\"section\">changed</span>, <span class=\"number\">0</span> insertions(+), <span class=\"number\">0</span> deletions(-)</span><br><span class=\"line\">create mode <span class=\"number\">100644</span> readme.md</span><br></pre></td></tr></table></figure>\n\n<p>  <code>file changed</code> 文件改动 <code>insertions</code>插入行数 <code>deletions</code>删除行数</p>\n</li>\n</ul>\n<h6 id=\"3-status与diff\"><a href=\"#3-status与diff\" class=\"headerlink\" title=\"3.status与diff\"></a>3.status与diff</h6><ul>\n<li><p>1 Def<br>  <strong>status</strong>: 查看仓库当前状态<br>  <strong>diff</strong>: 比较修改内容[diff要在add之前使用]<br>  <strong>checkout - -与reset HEAD</strong>： 抛弃修改与撤销缓存(回到当前版本)</p>\n</li>\n<li><p>2 Use<br>  修改readme.md，加入:</p>\n<pre><code>Git is a distributed version control system</code></pre><p>  <strong>2.1.直接查看</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for <span class=\"keyword\">commit</span>:</span><br><span class=\"line\">    (<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> what will be committed)</span><br><span class=\"line\">    (<span class=\"keyword\">use</span> <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> discard changes <span class=\"keyword\">in</span> working <span class=\"keyword\">directory</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   readme.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">no</span> changes added <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add\"</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> <span class=\"string\">\"git commit -a\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>  readme被修改，但是还没有添加到暂存区准备提交。你可添加add到暂存区，同时也可以<code>checkout --</code> 抛弃修改。</p>\n<p>  <strong>2.2.检查修改内容</strong></p>\n  <figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff readme.md</span><br><span class=\"line\">diff <span class=\"comment\">--git a/readme.md b/readme.md</span></span><br><span class=\"line\">index e69de29.<span class=\"number\">.45e43</span>ab <span class=\"number\">100644</span></span><br><span class=\"line\"><span class=\"comment\">--- a/readme.md</span></span><br><span class=\"line\">+++ b/readme.md</span><br><span class=\"line\">@@ <span class=\"number\">-0</span>,<span class=\"number\">0</span> +<span class=\"number\">1</span> @@</span><br><span class=\"line\">+Git <span class=\"keyword\">is</span> a distributed <span class=\"built_in\">version</span> control system</span><br><span class=\"line\">\\ No newline <span class=\"keyword\">at</span> <span class=\"keyword\">end</span> <span class=\"keyword\">of</span> <span class=\"built_in\">file</span></span><br></pre></td></tr></table></figure>\n\n<p>  <strong>2.3.add并查看</strong></p>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"builtin-name\">add</span> *</span><br><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes <span class=\"keyword\">to</span> be committed:</span><br><span class=\"line\">    (use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   readme.md</span><br></pre></td></tr></table></figure>\n\n<p>  status表示 要被提交的修改有 readme.md，同时你也可以用<code>reset HEAD</code>取消暂存。</p>\n<p>  <strong>2.4.commit并查看</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">commit</span> -m <span class=\"string\">\"add distributed\"</span></span><br><span class=\"line\">[<span class=\"keyword\">master</span> <span class=\"number\">51e675</span>a] <span class=\"keyword\">add</span> <span class=\"keyword\">distributed</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">file</span> <span class=\"keyword\">changed</span>, <span class=\"number\">1</span> insertion(+)</span><br><span class=\"line\">$ git <span class=\"keyword\">status</span></span><br><span class=\"line\"><span class=\"keyword\">On</span> branch <span class=\"keyword\">master</span></span><br><span class=\"line\"><span class=\"keyword\">nothing</span> <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span>, working tree clean</span><br></pre></td></tr></table></figure>\n\n<p>  status表示 没有需要提交的修改，工作目录是干净（working tree clean）的。</p>\n</li>\n</ul>\n<h6 id=\"4-log、reset与reflog\"><a href=\"#4-log、reset与reflog\" class=\"headerlink\" title=\"4.log、reset与reflog\"></a>4.log、reset与reflog</h6><ul>\n<li><p>1 Def:<br>  <strong>log</strong>: 显示从最近到最远的提交日志<br>  <strong>reset</strong>: 重置(回退)版本<br>  <strong>reflog</strong>: 显示命令日志</p>\n</li>\n<li><p>2 Use:<br>  情景：三个版本<br>  版本1：add distributed</p>\n  <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git is <span class=\"keyword\">a</span> distributed <span class=\"built_in\">version</span> control <span class=\"keyword\">system</span>.</span><br></pre></td></tr></table></figure>\n\n<p>  版本2：add free</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git <span class=\"keyword\">is</span> <span class=\"keyword\">a</span> distributed <span class=\"keyword\">version</span> control <span class=\"built_in\">system</span>.</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> free softwave.</span><br></pre></td></tr></table></figure>\n\n<p>  版本3：append GPL</p>\n  <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git is <span class=\"keyword\">a</span> distributed <span class=\"built_in\">version</span> control <span class=\"keyword\">system</span>.</span><br><span class=\"line\">Git is free softwave distributed under <span class=\"keyword\">the</span> GPL.</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>2.1.查看提交日志</strong></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">092719</span>a05ea5929fb2a72c990ae3a38a5b0b8129 (<span class=\"keyword\">HEAD</span> -&gt; <span class=\"keyword\">master</span>)</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">17</span>:<span class=\"number\">54</span>:<span class=\"number\">32</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    append GPL</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">8</span>a74499d95b927245debf21afadf001e621cb948</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">17</span>:<span class=\"number\">53</span>:<span class=\"number\">14</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">add</span> free</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">51e675</span>ad6e4a906bd4de3c65ef830b9564864ca4</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">17</span>:<span class=\"number\">39</span>:<span class=\"number\">11</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">add</span> <span class=\"keyword\">distributed</span></span><br></pre></td></tr></table></figure>\n\n<p>  通过log 我们可以看到3次提交，最近的一次是append GPL，上一次是add free，最早的一次是add distributed</p>\n<p>  <i>简洁化查看提交日志 - -pretty=oneline</i></p>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log <span class=\"attribute\">--pretty</span>=oneline</span><br><span class=\"line\">092719a05ea5929fb2a72c990ae3a38a5b0b8129 (HEAD -&gt; master) append GPL</span><br><span class=\"line\">8a74499d95b927245debf21afadf001e621cb948 <span class=\"builtin-name\">add</span> free</span><br><span class=\"line\">51e675ad6e4a906bd4de3c65ef830b9564864ca4 <span class=\"builtin-name\">add</span> distributed</span><br></pre></td></tr></table></figure>\n\n<p>  为了解决多人协作版本冲突问题，git采用了SHA1计算出的数字十六进制来表示版本号<code>commit id</code></p>\n<p>  <span id=\"001\"></span><br>  <strong>2.2.版本回退</strong><br>  HEAD 表示当前版本，HEAD^表示上一个版本，上N个版本用HEAD~N表示。<br>  现在要从当前版本append GPL 回退到上一个版本 add free</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">reset</span> <span class=\"comment\">--hard HEAD^ //使用commit id也可以</span></span><br><span class=\"line\"><span class=\"keyword\">HEAD</span> <span class=\"keyword\">is</span> <span class=\"keyword\">now</span> <span class=\"keyword\">at</span> <span class=\"number\">8</span>a74499 <span class=\"keyword\">add</span> free</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat readme.md</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> a <span class=\"keyword\">distributed</span> <span class=\"keyword\">version</span> control system.</span><br><span class=\"line\">Git <span class=\"keyword\">is</span> free softwave</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>2.3.回到未来</strong><br>  当经过上一步版本回退后，查看提交日志时，你会发现新的版本已经消失：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">8</span>a74499d95b927245debf21afadf001e621cb948 (<span class=\"keyword\">HEAD</span> -&gt; <span class=\"keyword\">master</span>)</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">17</span>:<span class=\"number\">53</span>:<span class=\"number\">14</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">add</span> free</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">51e675</span>ad6e4a906bd4de3c65ef830b9564864ca4</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">17</span>:<span class=\"number\">39</span>:<span class=\"number\">11</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">add</span> <span class=\"keyword\">distributed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"number\">99</span>ae527b16c7a4fe17c77f383b4bdba54a5f5ceb</span><br><span class=\"line\">Author: alazia &lt;alazia@email.com&gt;</span><br><span class=\"line\"><span class=\"built_in\">Date</span>:   Sun Aug <span class=\"number\">4</span> <span class=\"number\">16</span>:<span class=\"number\">56</span>:<span class=\"number\">38</span> <span class=\"number\">2019</span> +<span class=\"number\">0800</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">add</span> readme</span><br></pre></td></tr></table></figure>\n\n<p>  那么如何回到未来呢？<br>  我们可以通过git 查找到“未来”的版本号,并使用reset 回到未来。</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reflog</span><br><span class=\"line\"><span class=\"number\">8</span>a74499 (HEAD -&gt; master) HEAD@&#123;<span class=\"number\">0</span>&#125;: rese<span class=\"variable\">t:</span> moving <span class=\"keyword\">to</span> HEAD^</span><br><span class=\"line\"><span class=\"number\">092719</span><span class=\"keyword\">a</span> HEAD@&#123;<span class=\"number\">1</span>&#125;: commi<span class=\"variable\">t:</span> <span class=\"keyword\">append</span> GPL</span><br><span class=\"line\"><span class=\"number\">8</span>a74499 (HEAD -&gt; master) HEAD@&#123;<span class=\"number\">2</span>&#125;: commi<span class=\"variable\">t:</span> <span class=\"built_in\">add</span> free</span><br><span class=\"line\"><span class=\"number\">51</span>e675a HEAD@&#123;<span class=\"number\">3</span>&#125;: commi<span class=\"variable\">t:</span> <span class=\"built_in\">add</span> distributed</span><br><span class=\"line\"></span><br><span class=\"line\">$ git reset --hard <span class=\"number\">092719</span><span class=\"keyword\">a</span></span><br><span class=\"line\">HEAD <span class=\"keyword\">is</span> now at <span class=\"number\">092719</span><span class=\"keyword\">a</span> <span class=\"keyword\">append</span> GPL</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><span id=\"002\"></span></p>\n<h5 id=\"remote\"><a href=\"#remote\" class=\"headerlink\" title=\"remote\"></a>remote</h5><h6 id=\"1-SSH-Key\"><a href=\"#1-SSH-Key\" class=\"headerlink\" title=\"1.SSH Key\"></a>1.SSH Key</h6><ul>\n<li><p>1 创建SSH Key</p>\n  <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></span><br></pre></td></tr></table></figure>\n\n<p>  一路回车使用默认值<br>  通过查看电脑用户目录下<code>.ssh</code>目录,其中<br>  <code>id_rsa</code> 为私钥，<code>id_rsa.pub</code>为公钥。</p>\n</li>\n<li><p>2 添加SSH Key<br>  登录Github-&gt;Account Settings-&gt;SSH Keys-&gt;Add SSH Key<br>  添加id_rsa.pub内容，Title任意。<br>  <img src=\"/2021/01/11/TL01/SSHkey.png\" alt=\"SSHKEY\"></p>\n</li>\n<li><p>Github SSH Key 的意义<br>  因为GitHub需要识别出你的身份，才能允许你推送提交(Push)，而Git支持SSH协议，因此SSH Key是必要的。</p>\n</li>\n</ul>\n<h6 id=\"2-本地到远程\"><a href=\"#2-本地到远程\" class=\"headerlink\" title=\"2.本地到远程\"></a>2.本地到远程</h6><ul>\n<li><p>1 添加远程库<br>  情景：本地创建了仓库myres，需要在Github上建立远程仓库。<br>  <strong>步骤一</strong>： Github创建同名仓库<br>  <strong>步骤二</strong>： 在本地仓库下与Github仓库关联</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github<span class=\"selector-class\">.com</span>:username/resname<span class=\"selector-class\">.git</span> <span class=\"comment\">// origin 是git默认远程库叫法</span></span><br></pre></td></tr></table></figure>\n\n<p>  Ps:这里需要将SSH KEY添加到账号/仓库中，否则只是关联，无法推送<br>  <strong>步骤三</strong>： 推送本地仓库内容到远程库</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -<span class=\"keyword\">u</span> origin master</span><br><span class=\"line\">Counting object<span class=\"variable\">s:</span> <span class=\"number\">20</span>, done.</span><br><span class=\"line\">Delta compression using <span class=\"keyword\">up</span> <span class=\"keyword\">to</span> <span class=\"number\">4</span> threads.</span><br><span class=\"line\">Compressing object<span class=\"variable\">s:</span> <span class=\"number\">100</span>% (<span class=\"number\">15</span>/<span class=\"number\">15</span>), done.</span><br><span class=\"line\">Writing object<span class=\"variable\">s:</span> <span class=\"number\">100</span>% (<span class=\"number\">20</span>/<span class=\"number\">20</span>), <span class=\"number\">1.64</span> KiB | <span class=\"number\">560.00</span> KiB/s, done.</span><br><span class=\"line\">Total <span class=\"number\">20</span> (delta <span class=\"number\">5</span>), reused <span class=\"number\">0</span> (delta <span class=\"number\">0</span>)</span><br><span class=\"line\">remote: Resolving delta<span class=\"variable\">s:</span> <span class=\"number\">100</span>% (<span class=\"number\">5</span>/<span class=\"number\">5</span>), done.</span><br><span class=\"line\">To github.<span class=\"keyword\">com</span>:username/resname.git</span><br><span class=\"line\">* [<span class=\"keyword\">new</span> branch]      master -&gt; master</span><br><span class=\"line\">Branch <span class=\"string\">'master'</span> <span class=\"keyword\">set</span> <span class=\"keyword\">up</span> <span class=\"keyword\">to</span> track remote branch <span class=\"string\">'master'</span> from <span class=\"string\">'origin'</span>.</span><br></pre></td></tr></table></figure>\n\n<p>  Ps:第一次推送时,使用<code>git push</code> 实际上是把master 推送到了远程库，而加上<code>-u</code>参数不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n</li>\n<li><p>2 Push 推送<br>  <strong>Def</strong>: 将本地master分支<strong>提交后</strong>的最新修改推送至GitHub<br>  <strong>Use</strong>:</p>\n  <figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> master</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"3-远程到本地\"><a href=\"#3-远程到本地\" class=\"headerlink\" title=\"3.远程到本地\"></a>3.远程到本地</h6><ul>\n<li><p>1 克隆远程库<br>  情景：已经有了GitHub远程库，想要在本地建立仓库。<br>  <strong>步骤一</strong>：获取远程库地址<br>  <strong>步骤二</strong>：克隆远程库到本地</p>\n  <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone git<span class=\"meta\">@github</span>.<span class=\"string\">com:</span>username/remotename.git</span><br><span class=\"line\">Cloning into <span class=\"string\">'remotename'</span>...</span><br><span class=\"line\"><span class=\"string\">remote:</span> Counting <span class=\"string\">objects:</span> <span class=\"number\">3</span>, done.</span><br><span class=\"line\"><span class=\"string\">remote:</span> Total <span class=\"number\">3</span> (delta <span class=\"number\">0</span>), reused <span class=\"number\">0</span> (delta <span class=\"number\">0</span>), pack-reused <span class=\"number\">3</span></span><br><span class=\"line\">Receiving <span class=\"string\">objects:</span> <span class=\"number\">100</span>% (<span class=\"number\">3</span>/<span class=\"number\">3</span>), done.</span><br></pre></td></tr></table></figure>\n\n<p>  此时本地就有了远程仓库的所有文件<br>  Ps: 远程库地址有两种：<br>  1.git:// 默认使用ssh<br>  2.https 但速度慢，并且每次推送需要输入口令<br>  很多只开放http端口的公司只能使用https，而不使用ssh协议</p>\n</li>\n<li><p>2 Pull 拉取<br>  <strong>Def</strong>: 将GitHub远程库当前版本拉取到本地<br>  <strong>Use</strong>:</p>\n  <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>git pull</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"SSH警告\"><a href=\"#SSH警告\" class=\"headerlink\" title=\"SSH警告\"></a>SSH警告</h6><ul>\n<li><p>当第一次使用clone|push连接Github时，会得到一个警告：</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The authenticity <span class=\"keyword\">of</span> host <span class=\"comment\">'github.com (xx.xx.xx.xx)' can't be established.</span></span><br><span class=\"line\">RSA <span class=\"keyword\">key</span> fingerprint <span class=\"keyword\">is</span> xx.xx.xx.xx.xx.</span><br><span class=\"line\">Are you sure you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n\n<p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。<br>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Permanently added <span class=\"string\">'github.com'</span> (RSA) <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> list <span class=\"keyword\">of</span> known hosts.</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"Branch\"><a href=\"#Branch\" class=\"headerlink\" title=\"Branch\"></a>Branch</h5><h6 id=\"1-Def\"><a href=\"#1-Def\" class=\"headerlink\" title=\"1.Def\"></a>1.Def</h6><ul>\n<li>分支是为了将修改记录的整体流程分叉保存。分叉后的分支不受其他分支的影响，所以在同一个数据库里可以同时进行多个修改。</li>\n<li>为了不受其他开发人员的影响，您可以在主分支上建立自己专用的分支。完成工作后，将自己分支上的修改合并到主分支。因为每一次提交的历史记录都会被保存，所以当发生问题时，定位和修改造成问题的提交就容易多了。</li>\n</ul>\n<h6 id=\"2-创建与合并分支\"><a href=\"#2-创建与合并分支\" class=\"headerlink\" title=\"2.创建与合并分支\"></a>2.创建与合并分支</h6><ul>\n<li><p>1.Def：<br>  在<a href=\"#001\">版本回退</a>,我们知道,每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。<br>  目前为止，只有一条主分支<code>master</code>，而<code>HEAD</code>是指向<code>master</code>,<code>master</code>才是指向提交的。<br>  <code>HEAD</code>指向的就是<strong>当前</strong>分支.<br>  <img src=\"/2021/01/11/TL01/branch01.png\" alt=\"branch01\"></p>\n</li>\n<li><p>2.branch<br>  <strong>创建新的分支dev并切换</strong></p>\n  <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch dev</span><br><span class=\"line\">$ git checkout dev</span><br><span class=\"line\">Switched <span class=\"built_in\">to</span> <span class=\"keyword\">a</span> <span class=\"built_in\">new</span> branch <span class=\"string\">'dev'</span></span><br></pre></td></tr></table></figure>\n\n<p>  或</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -<span class=\"selector-tag\">b</span> dev</span><br><span class=\"line\">Switched to <span class=\"selector-tag\">a</span> new branch <span class=\"string\">'dev'</span></span><br></pre></td></tr></table></figure>\n\n<p>  此时，git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示<code>当前</code>分支在<code>dev</code>上<br>  <img src=\"/2021/01/11/TL01/branch02.png\" alt=\"branch02\"></p>\n<p>  <strong>修改提交后指针变化</strong><br>  在进入<code>dev</code>分支后，工作区的修改和提交就是针对<code>dev</code>分支了，比如此时新提交一次，则：<br>  <img src=\"/2021/01/11/TL01/branch03.png\" alt=\"branch03\"></p>\n<p>  <strong>合并分支并删除dev</strong><br>  当<code>dev</code>上的工作完成后，将<code>master</code>直接指向<code>dev</code>当前提交时，便完成了合并</p>\n  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git checkout master <span class=\"comment\">//切回master,此时你会发现master里没有dev上更改的文件</span></span><br><span class=\"line\">Switched to branch <span class=\"string\">'master'</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git merge dev <span class=\"comment\">//合并dev. </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Updating</span></span> d46f35e..b17d20e</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\">readme.txt | <span class=\"number\">1</span> +</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">file</span> changed, <span class=\"number\">1</span> insertion(+)</span><br></pre></td></tr></table></figure>\n\n<p>  <code>Fast-forward</code>表示这次合并时快进模式，也就是直接把master指向dev的当前提交，所以合并速度非常快。<br>  <img src=\"/2021/01/11/TL01/branch04.png\" alt=\"branch04\"></p>\n  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git branch <span class=\"comment\">//查看分支，*表示当前分支</span></span><br><span class=\"line\"><span class=\"comment\">* dev</span></span><br><span class=\"line\">master</span><br><span class=\"line\"><span class=\"symbol\">$</span> git branch -d dev <span class=\"comment\">//删除dev分支</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git branch </span><br><span class=\"line\"><span class=\"comment\">* master</span></span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"/2021/01/11/TL01/branch05.png\" alt=\"branch05\"></p>\n</li>\n</ul>\n<h6 id=\"3-解决冲突\"><a href=\"#3-解决冲突\" class=\"headerlink\" title=\"3.解决冲突\"></a>3.解决冲突</h6><ul>\n<li><p>1 Def:<br>  <strong>conflict</strong>：冲突，同一处不同的修改合并产生的冲突。</p>\n</li>\n<li><p>2 Solution:<br>  情景：<br>  <code>feature1</code>分支 提交修改了readme.md</p>\n  <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating a <span class=\"keyword\">new</span> branch <span class=\"keyword\">is</span> quick <span class=\"keyword\">AND</span> simple</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git add *</span><br><span class=\"line\"><span class=\"symbol\">$</span> git commit -m <span class=\"string\">\"AND\"</span></span><br><span class=\"line\">[feature1 c5584de] <span class=\"keyword\">AND</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">file</span> changed, <span class=\"number\">1</span> insertion(+), <span class=\"number\">2</span> deletions(-)</span><br></pre></td></tr></table></figure>\n\n<p>  <code>master</code>分支 提交修改了readme.md</p>\n  <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating a <span class=\"keyword\">new</span> branch <span class=\"keyword\">is</span> quick &amp; simple</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"&amp;\"</span></span><br><span class=\"line\">[master <span class=\"number\">59</span>d6553] &amp;</span><br><span class=\"line\"><span class=\"number\">1</span> file <span class=\"section\">changed</span>, <span class=\"number\">1</span> insertion(+), <span class=\"number\">2</span> deletions(-)</span><br></pre></td></tr></table></figure>\n\n<p>  <code>merge</code>命令 合并时：</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">merge</span> feature1</span><br><span class=\"line\"><span class=\"keyword\">Auto</span>-merging readme.md</span><br><span class=\"line\">CONFLICT (<span class=\"keyword\">content</span>): <span class=\"keyword\">Merge</span> conflict <span class=\"keyword\">in</span> readme.md</span><br><span class=\"line\"><span class=\"keyword\">Automatic</span> <span class=\"keyword\">merge</span> <span class=\"keyword\">failed</span>; fix conflicts and then <span class=\"keyword\">commit</span> the result.</span><br></pre></td></tr></table></figure>\n\n<p>  Git告诉我们readme.md发生了冲突，我们也可以通过status查看</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">You have unmerged paths.</span><br><span class=\"line\">(fix conflicts and run \"git <span class=\"keyword\">commit</span><span class=\"string\">\")</span></span><br><span class=\"line\"><span class=\"string\">(use \"</span>git <span class=\"keyword\">merge</span> <span class=\"comment\">--abort\" to abort the merge)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Unmerged paths:</span><br><span class=\"line\">(<span class=\"keyword\">use</span> <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> mark resolution)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">both</span> modified:   readme.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">no</span> changes added <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span> (<span class=\"keyword\">use</span> <span class=\"string\">\"git add\"</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> <span class=\"string\">\"git commit -a\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>  我们打开readme.md</p>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">Creating a new branch is quick &amp; simple</span><br><span class=\"line\">=======</span><br><span class=\"line\">Creating a new branch is quick <span class=\"keyword\">AND</span> simple</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure>\n\n<p>  Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容</p>\n<p>  我们修改后保存再提交：</p>\n  <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating a <span class=\"keyword\">new</span> branch <span class=\"keyword\">is</span> quick <span class=\"keyword\">AND</span> simple</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add readme.md</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"conflict fixed\"</span></span><br><span class=\"line\">[<span class=\"keyword\">master</span> <span class=\"title\">ec49478</span>] conflict fixed</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"/2021/01/11/TL01/branch06.png\" alt=\"branch06\"><br>  通过<code>log</code>查看分支合并情况：</p>\n  <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">$</span> git <span class=\"built-in\">log</span> --graph --pretty=oneline --abbrev-commit <span class=\"comment\">//git log --graph命令可以看到分支合并图</span></span><br><span class=\"line\"><span class=\"comment\">*   ec49478 (HEAD -&gt; master) conflict fixed</span></span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * c5584de (feature1) <span class=\"keyword\">AND</span></span><br><span class=\"line\"><span class=\"comment\">* | 59d6553 &amp;</span></span><br><span class=\"line\">|/</span><br><span class=\"line\"><span class=\"comment\">* 092719a append GPL</span></span><br><span class=\"line\"><span class=\"comment\">* 8a74499 add free“</span></span><br><span class=\"line\"><span class=\"comment\">* 51e675a add distributed</span></span><br><span class=\"line\"><span class=\"comment\">* 99ae527 add readme</span></span><br><span class=\"line\"><span class=\"symbol\">$</span> git branch -d feature1 <span class=\"comment\">//最后删除分支</span></span><br><span class=\"line\">Deleted branch feature1 (was c5584de).</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"4-分支管理策略\"><a href=\"#4-分支管理策略\" class=\"headerlink\" title=\"4.分支管理策略\"></a>4.分支管理策略</h6><ul>\n<li><p>1 Def:<br>  合并分支时，通常如果可能(不发生冲突),Git会默认使用<code>Fast forward</code>模式，但是这种模式下，删除分支后，会丢失分支信息。<br>  <img src=\"/2021/01/11/TL01/branch04.png\" alt=\"branch04\"><br>  <img src=\"/2021/01/11/TL01/branch05.png\" alt=\"branch05\"><br>  如果要强制禁用<code>Fast forward</code>模式，Git会在<code>merge</code>时生成一个新的commit，这样就可以从分支历史上看出分支信息<br>  即类似下面合并后：<br>  <img src=\"/2021/01/11/TL01/branch06.png\" alt=\"branch06\"></p>\n</li>\n<li><p>2 Use:<code>--no-ff</code></p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">merge</span> <span class=\"comment\">--no-ff -m \"merge with on-ff\" dev </span></span><br><span class=\"line\"><span class=\"keyword\">Merge</span> made <span class=\"keyword\">by</span> the <span class=\"string\">'recursive'</span> strategy.</span><br><span class=\"line\">readme.md | <span class=\"number\">2</span> +-</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">file</span> <span class=\"keyword\">changed</span>, <span class=\"number\">1</span> insertion(+), <span class=\"number\">1</span> deletion(-)</span><br><span class=\"line\">$ git <span class=\"keyword\">log</span> <span class=\"comment\">--graph --pretty=oneline --abbrev-commit</span></span><br><span class=\"line\">*   f0fcabe (<span class=\"keyword\">HEAD</span> -&gt; <span class=\"keyword\">master</span>) <span class=\"keyword\">merge</span> <span class=\"keyword\">with</span> <span class=\"keyword\">no</span>-ff</span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * ee54c4c (dev) <span class=\"keyword\">add</span> <span class=\"keyword\">merge</span></span><br><span class=\"line\">|/</span><br><span class=\"line\">*   ec49478 conflict <span class=\"keyword\">fixed</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3 实际开发<br>  master分支仅用来发布新版本，是非常稳定的。<br>  dev分支上进行开发，是不稳定的。<br>  比如1.0版本发布时，先把dev分支合并到master上，再在master分支发布1.0版本；<br>  而你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p>\n<p>  <img src=\"/2021/01/11/TL01/branch07.png\" alt=\"此图来自廖雪峰Git教程\"></p>\n</li>\n</ul>\n<h6 id=\"Bug与Feature分支\"><a href=\"#Bug与Feature分支\" class=\"headerlink\" title=\"Bug与Feature分支\"></a>Bug与Feature分支</h6><ul>\n<li><p>1 Bug分支<br>  Def: 每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。<br>  情景： 你遇到一个代号404的bug，打算创建临时分支<code>issue-404</code>来修复，但<code>dev</code>上工作进行了一半还没提交。<br>  <strong>步骤一</strong>：<code>stash</code>储存工作现场</p>\n  <figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br><span class=\"line\">Saved working directory and index <span class=\"keyword\">state</span> WIP <span class=\"keyword\">on</span> dev: f0fcabe merge with no-ff</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>步骤二</strong>： 从指定分支创建临时修复bug分支</p>\n  <figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched <span class=\"built_in\">to</span> branch <span class=\"string\">'master'</span></span><br><span class=\"line\">$ git checkout -b issue<span class=\"number\">-404</span></span><br><span class=\"line\">Switched <span class=\"built_in\">to</span> <span class=\"keyword\">a</span> <span class=\"built_in\">new</span> branch <span class=\"string\">'issue-404'</span></span><br></pre></td></tr></table></figure>\n\n<p>  <strong>步骤三</strong>：修复bug</p>\n  <figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add *</span><br><span class=\"line\">$ git commit -m <span class=\"string\">\"fix bug 404\"</span></span><br><span class=\"line\">[issue<span class=\"number\">-404</span> d9abeeb] fix bug <span class=\"number\">404</span></span><br><span class=\"line\"> <span class=\"number\">1</span> file <span class=\"section\">changed</span>, <span class=\"number\">1</span> insertion(+), <span class=\"number\">1</span> deletion(-)</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>步骤四</strong>：合并分支并删除bug分支</p>\n  <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch 'master'</span><br><span class=\"line\">$ git <span class=\"keyword\">merge</span> <span class=\"comment\">--no-ff -m \"merged bug fix 404\" issue-404</span></span><br><span class=\"line\"><span class=\"keyword\">Merge</span> made <span class=\"keyword\">by</span> the <span class=\"string\">'recursive'</span> strategy.</span><br><span class=\"line\">readme.md | <span class=\"number\">2</span> +-</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"keyword\">file</span> <span class=\"keyword\">changed</span>, <span class=\"number\">1</span> insertion(+), <span class=\"number\">1</span> deletion(-)</span><br><span class=\"line\">$ git branch -d issue<span class=\"number\">-404</span></span><br><span class=\"line\">Deleted branch issue<span class=\"number\">-404</span> (was d9abeeb).</span><br><span class=\"line\">$ git checkout dev</span><br><span class=\"line\">Switched <span class=\"keyword\">to</span> branch <span class=\"string\">'dev'</span></span><br><span class=\"line\">$ git <span class=\"keyword\">status</span></span><br><span class=\"line\"><span class=\"keyword\">On</span> branch dev</span><br><span class=\"line\"><span class=\"keyword\">nothing</span> <span class=\"keyword\">to</span> <span class=\"keyword\">commit</span>, working tree clean</span><br></pre></td></tr></table></figure>\n\n<p>  <strong>步骤五</strong>：<code>stash apply+drop /pop</code>恢复工作现场</p>\n  <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash <span class=\"keyword\">list</span></span><br><span class=\"line\">stash@&#123;<span class=\"number\">0</span>&#125;: WIP <span class=\"keyword\">on</span> de<span class=\"variable\">v:</span>  f0fcabe merge with <span class=\"keyword\">no</span>-ff</span><br><span class=\"line\">$ git stash <span class=\"keyword\">pop</span> //恢复同时删除stash内容，apply stash@&#123;<span class=\"number\">0</span>&#125;只是恢复，需要<span class=\"keyword\">drop</span> stash@&#123;<span class=\"number\">0</span>&#125;:删除</span><br><span class=\"line\">On branch dev</span><br><span class=\"line\">Changes <span class=\"keyword\">to</span> <span class=\"keyword\">be</span> committed:</span><br><span class=\"line\">(use <span class=\"string\">\"git reset HEAD &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"keyword\">file</span>:   hello.<span class=\"keyword\">py</span></span><br><span class=\"line\"></span><br><span class=\"line\">Changes not staged <span class=\"keyword\">for</span> commi<span class=\"variable\">t:</span></span><br><span class=\"line\">(use <span class=\"string\">\"git add &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> <span class=\"keyword\">update</span> what will <span class=\"keyword\">be</span> committed)</span><br><span class=\"line\">(use <span class=\"string\">\"git checkout -- &lt;file&gt;...\"</span> <span class=\"keyword\">to</span> discard <span class=\"keyword\">changes</span> in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">    modified:   readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Dropped refs/stash@&#123;<span class=\"number\">0</span>&#125; (<span class=\"number\">5</span>d677e2ee266f39ea296182fb2354265b91b3b2a)</span><br><span class=\"line\">$ git stash <span class=\"keyword\">list</span> //检查</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2 feature分支<br>  Def: 在软件开发过程中，添加一个新功能时，肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支<br>  情景一：开发完成，合并分支，删除分支，顺利完成。<br>  情景二：功能叫停，含机密资料的分支必须销毁</p>\n  <figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -d feature-x</span><br><span class=\"line\"><span class=\"keyword\">error: </span>The branch 'feature-x' is not fully merged.</span><br><span class=\"line\">If you are sure you want to delete it, run 'git branch -D feature-x'.</span><br></pre></td></tr></table></figure>\n\n<p>  分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数。</p>\n  <figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">branch </span>-D feature-x</span><br><span class=\"line\"><span class=\"symbol\">Deleted</span> <span class=\"keyword\">branch </span>feature-x (was <span class=\"number\">287773</span>e).</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h6 id=\"多人协作与Rebase\"><a href=\"#多人协作与Rebase\" class=\"headerlink\" title=\"多人协作与Rebase\"></a>多人协作与Rebase</h6><ul>\n<li><p>1 Def：<br>  在<a href=\"#002\">remote</a>,我们学习了Push(推送)、PUll(拉取)，这里具体介绍多人协作时使用。</p>\n</li>\n<li><p>2 Remote远程库信息：</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote -v</span><br><span class=\"line\">origin  git@github<span class=\"selector-class\">.com</span>:username/resname<span class=\"selector-class\">.git</span> (fetch)</span><br><span class=\"line\">origin  git@github<span class=\"selector-class\">.com</span>:username/resname<span class=\"selector-class\">.git</span> (push)</span><br></pre></td></tr></table></figure>\n\n<p>  上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址</p>\n</li>\n<li><p>3 Push 推送分支</p>\n  <figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> branch-name</span><br></pre></td></tr></table></figure>\n\n<p>  <code>master</code>分支是主分支，因此要时刻与远程同步；<br>  <code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步。<br>  <code>bug</code>分支只用于在本地修复bug，就没必要推到远程了。<br>  <code>feature</code>分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</p>\n</li>\n<li><p>4 Pull/Clone 抓取分支<br>  多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改,但是从远程库clone时，默认只能看到本地的<code>master</code><br>  但是需要在<code>dev</code>进行开发，所以必须创建远程origin/dev分支关联：</p>\n  <figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b <span class=\"built_in\">dev</span> origin/<span class=\"built_in\">dev</span></span><br></pre></td></tr></table></figure>\n\n<p>  在你修改提交<code>dev</code>后试图推送时，发现你的小伙伴已经推送了他的<code>dev</code>提交：</p>\n  <figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin dev</span><br><span class=\"line\">To github<span class=\"selector-class\">.com</span>:username/resname.git</span><br><span class=\"line\">! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class=\"line\">error: failed to push some refs to <span class=\"string\">'git@github.com:username/resname.git'</span></span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Integrate the remote changes (e<span class=\"selector-class\">.g</span>.</span><br><span class=\"line\">hint: <span class=\"string\">'git pull ...'</span>) before pushing again.</span><br><span class=\"line\">hint: See the <span class=\"string\">'Note about fast-forwards'</span> <span class=\"keyword\">in</span> <span class=\"string\">'git push --help'</span> <span class=\"keyword\">for</span> <span class=\"selector-tag\">details</span>.</span><br></pre></td></tr></table></figure>\n\n<p>  推送失败，这时候你需要将最新的提交<code>拉取</code>下来，在本地<code>合并</code>后<code>解除冲突</code>，再<code>推送</code>:</p>\n  <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull</span><br><span class=\"line\">There is <span class=\"literal\">no</span><span class=\"built_in\"> tracking </span>information <span class=\"keyword\">for</span> the current branch.</span><br><span class=\"line\">Please specify which branch you want <span class=\"keyword\">to</span> merge with.</span><br><span class=\"line\">See git-pull(1) <span class=\"keyword\">for</span> details.</span><br><span class=\"line\"></span><br><span class=\"line\">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">If</span> you wish <span class=\"keyword\">to</span> <span class=\"builtin-name\">set</span><span class=\"built_in\"> tracking </span>information <span class=\"keyword\">for</span> this branch you can <span class=\"keyword\">do</span> so with:</span><br><span class=\"line\"></span><br><span class=\"line\">    git branch <span class=\"attribute\">--set-upstream-to</span>=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure>\n\n<p>  拉取失败？这是因为<strong>没有指定本地dev分支与远程origin/dev分支的链接</strong>:</p>\n  <figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch --<span class=\"keyword\">set</span>-upstream-<span class=\"keyword\">to</span>=origin/dev dev</span><br><span class=\"line\">Branch <span class=\"string\">'dev'</span> <span class=\"keyword\">set</span> up <span class=\"keyword\">to</span> track remote branch <span class=\"string\">'dev'</span> <span class=\"keyword\">from</span> <span class=\"string\">'origin'</span>.</span><br></pre></td></tr></table></figure>\n\n<p>  链接完成后再进行相应操作：Pull-&gt;merge-&gt;fix conflict-&gt;Push</p>\n</li>\n<li><p>5 实际开发</p>\n<ul>\n<li>首先，可以试图用git push origin branch-name推送自己的修改；</li>\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li>\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\n<li>没有冲突或者解决掉冲突后，再用git push origin branch-name送就能成功</li>\n<li>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to branch-name origin/branch-name。</li>\n</ul>\n</li>\n<li><p>6 rebase<br>  Def: 多人在同一个分支上协作时,很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功,此时提交历史非常凌乱，为了解决这个问题，Git提供了<code>Rebase</code>変基。<br>  Use:</p>\n<ul>\n<li>在Push之前，通过rebase 进行提交历史的整理。<br>rebase操作可以把本地未push的分叉提交历史整理成直线；<br>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li>\n</ul>\n</li>\n</ul>\n<h6 id=\"tag\"><a href=\"#tag\" class=\"headerlink\" title=\"tag\"></a>tag</h6><ul>\n<li><p>1 Def:<br>  发布一个版本时，我们通常先在版本库中打一个标签（tag），将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来，所以标签也是版本库的一个快照。</p>\n</li>\n<li><p>2 Use:</p>\n  <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">name</span> //默认标签是打在最新提交的commit上的</span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">name</span> commit_id //也可以先log查看commit,打在之前的版本上。</span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">//查看标签</span></span><br><span class=\"line\"><span class=\"title\">$</span> git show tagname //查看具体的标签信息(提交id，作者，日期等)</span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-a</span> v0.<span class=\"number\">1</span> -m <span class=\"string\">\"version 0.1 released\"</span> <span class=\"number\">1094</span>adb</span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-d</span> name //删除</span><br><span class=\"line\">$ git push origin tagname //推送标签到远程</span><br><span class=\"line\">$ git push origin --tags //推送所有标签</span><br><span class=\"line\"></span><br><span class=\"line\">$ git <span class=\"keyword\">tag</span> <span class=\"title\">-d</span> v0.<span class=\"number\">9</span> //先删除本地标签</span><br><span class=\"line\">$ git push origin :refs/tags/v0.<span class=\"number\">9</span> 从远程删除，也是push命令</span><br></pre></td></tr></table></figure>\n\n<p>  标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。</p>\n</li>\n</ul>\n<h5 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h5><h6 id=\"Pull-Request\"><a href=\"#Pull-Request\" class=\"headerlink\" title=\"Pull Request\"></a>Pull Request</h6><ul>\n<li>TODO</li>\n</ul>\n<h6 id=\"Git-服务器搭建\"><a href=\"#Git-服务器搭建\" class=\"headerlink\" title=\"Git 服务器搭建\"></a>Git 服务器搭建</h6><ul>\n<li>TODO</li>\n</ul>\n<p>参考资料：</p>\n<ul>\n<li>1 <a href=\"https://www.youtube.com/watch?v=SWYqp7iY_Tc\" target=\"_blank\" rel=\"noopener\">Git &amp; GitHub Crash Course For Beginners</a></li>\n<li>2 <a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰Git教程</a></li>\n<li>3 <a href=\"https://backlog.com/git-tutorial/cn/\" target=\"_blank\" rel=\"noopener\">猴子都能懂得GIT入门</a></li>\n</ul>"},{"title":"音乐视频评论测试用","comments":1,"_content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=412175676&auto=1&height=66\"></iframe>\n\n<iframe width=\"1000\" height=\"600\" src=\"https://www.youtube.com/embed/zhIScvlFn2w\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n  <iframe src=\"//player.bilibili.com/player.html?aid=51809787&cid=90701462&page=1\" \n          scrolling=\"no\" \n          border=\"0\" \n          frameborder=\"no\" \n          framespacing=\"0\" \n          allowfullscreen=\"true\" \n          style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"> </iframe>\n</div>\n\n","source":"_drafts/T01.md","raw":"---\ntitle: 音乐视频评论测试用\ntags:\n- hexo\ncategories:\n- hexo\ncomments: true\n---\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=412175676&auto=1&height=66\"></iframe>\n\n<iframe width=\"1000\" height=\"600\" src=\"https://www.youtube.com/embed/zhIScvlFn2w\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n  <iframe src=\"//player.bilibili.com/player.html?aid=51809787&cid=90701462&page=1\" \n          scrolling=\"no\" \n          border=\"0\" \n          frameborder=\"no\" \n          framespacing=\"0\" \n          allowfullscreen=\"true\" \n          style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"> </iframe>\n</div>\n\n","slug":"T01","published":0,"date":"2021-01-11T01:07:59.569Z","updated":"2021-01-11T01:07:59.569Z","layout":"post","photos":[],"link":"","_id":"ckjwdelzq0002b4txbe3o4vyn","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=412175676&auto=1&height=66\"></iframe>\n\n<iframe width=\"1000\" height=\"600\" src=\"https://www.youtube.com/embed/zhIScvlFn2w\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n  <iframe src=\"//player.bilibili.com/player.html?aid=51809787&cid=90701462&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"> </iframe>\n</div>\n\n","site":{"data":{}},"length":11,"excerpt":"","more":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=412175676&auto=1&height=66\"></iframe>\n\n<iframe width=\"1000\" height=\"600\" src=\"https://www.youtube.com/embed/zhIScvlFn2w\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n  <iframe src=\"//player.bilibili.com/player.html?aid=51809787&cid=90701462&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height: 100%; left: 0; top: 0;\"> </iframe>\n</div>\n\n"},{"title":"Mix drinks and change lives","comments":0,"date":"2021-01-01T00:00:00.000Z","updated":"2021-01-01T00:00:00.000Z","_content":"\n\n久しぶりです——\n----------------------------------------------\n>To Drink 是alazia｜空想珺的个人网站\n\nYou can read me from this CyberSpace,Reality OR Virtual\n\n<!--more-->\n\n###### about Alazia\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n<iframe src=\"//player.bilibili.com/player.html?aid=8620364&cid=14196107&page=1\" \nscrolling=\"no\" \nborder=\"0\" \nframeborder=\"no\" \nframespacing=\"0\" \nallowfullscreen=\"true\" \nstyle=\"position: absolute; width: 100%; height:100%; left: 0; top: 0;\"> </iframe>\n</div>\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Mix drinks and change lives\ntags: \n- Thoughts\ncomments: false\ndate: 01-01-2021\nupdated: 01-01-2021\n---\n\n\n久しぶりです——\n----------------------------------------------\n>To Drink 是alazia｜空想珺的个人网站\n\nYou can read me from this CyberSpace,Reality OR Virtual\n\n<!--more-->\n\n###### about Alazia\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n<iframe src=\"//player.bilibili.com/player.html?aid=8620364&cid=14196107&page=1\" \nscrolling=\"no\" \nborder=\"0\" \nframeborder=\"no\" \nframespacing=\"0\" \nallowfullscreen=\"true\" \nstyle=\"position: absolute; width: 100%; height:100%; left: 0; top: 0;\"> </iframe>\n</div>\n\n","slug":"hello-world","published":1,"layout":"post","photos":[],"link":"","_id":"ckjwdelzu0006b4txz17ycl55","content":"<h2 id=\"久しぶりです——\"><a href=\"#久しぶりです——\" class=\"headerlink\" title=\"久しぶりです——\"></a>久しぶりです——</h2><blockquote>\n<p>To Drink 是alazia｜空想珺的个人网站</p>\n</blockquote>\n<p>You can read me from this CyberSpace,Reality OR Virtual</p>\n<a id=\"more\"></a>\n\n<h6 id=\"about-Alazia\"><a href=\"#about-Alazia\" class=\"headerlink\" title=\"about Alazia\"></a>about Alazia</h6><div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n<iframe src=\"//player.bilibili.com/player.html?aid=8620364&cid=14196107&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height:100%; left: 0; top: 0;\"> </iframe>\n</div>\n\n","site":{"data":{}},"length":111,"excerpt":"<h2 id=\"久しぶりです——\"><a href=\"#久しぶりです——\" class=\"headerlink\" title=\"久しぶりです——\"></a>久しぶりです——</h2><blockquote>\n<p>To Drink 是alazia｜空想珺的个人网站</p>\n</blockquote>\n<p>You can read me from this CyberSpace,Reality OR Virtual</p>","more":"<h6 id=\"about-Alazia\"><a href=\"#about-Alazia\" class=\"headerlink\" title=\"about Alazia\"></a>about Alazia</h6><div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\">\n<iframe src=\"//player.bilibili.com/player.html?aid=8620364&cid=14196107&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; height:100%; left: 0; top: 0;\"> </iframe>\n</div>"},{"title":"Linux与windows 文件搜索、统计与重命名","comments":1,"_content":"##### Linux 文件查询统计与命名\n*  查看当前目录下文件大小\n```\nls -lh \n```\n* 查看当前目录下的文件数量（包含子目录中的文件） 注意：R，代表子目录\n```\nls -l|grep \"^-\"| wc -l\n```\n* 查看当前目录下的文件夹目录个数（不包含子目录中的目录），如果需要查看子目录的，加上R\n```\nls -lR|grep \"^-\"| wc -l\n```\n<!--more-->\n* 对当前目录下所有的符合匹配字符的文件进行数量统计\n```\nls -l *.wiff|grep \"^-\"| wc -l\nls -l *.wiff.scan|grep \"^-\"| wc -l\nls -l *blk*.wiff.scan|grep \"^-\"| wc -l\n```\n* 对当前目录下及子目录所有的符合匹配字符的文件进行数量统计\n```\nfind . -type f -name \"*GNHS*.wiff.scan\" -exec ls -lh {} \\;\nfind . -type f -name \"*GNHS*.wiff\" ! -name \"*blk*\" -exec ls -lh {} \\;\n# 在后面加上 >out.log，将结果输出到out.log文件中\nfind . -type f -name \"*GNHS*.wiff.scan\" -exec ls -lh {} \\;>out.log\n```\n* 对.wiff文件统一命名成_low.wiff文件\n```\nfor var in *.wiff; do mv \"$var\" \"${var%.wiff}_low.wiff\"; done\n```\n\n\n##### windows下搜索\n* python\n```\nimport os\nimport fnmatch\nimport pandas as pd\n```\n* 对指定目录下所有符合匹配字符(列表形式)文件进行统计\n```\ndef formatSize(bytes):\n    ''' 用mb表示文件大小 '''\n    bytes = float(bytes)\n    kb = bytes / 1024\n    mb = kb / 1024\n    return mb\n\ndef search_text(search,path):\n    ''' 在指定路径搜索指定字段 '''\n    res = []\n    size = []\n    for root, dirnames, filenames in os.walk(os.path.expanduser(path)):\n        for extension in search:\n            for filename in fnmatch.filter(filenames, extension):\n                res.append(os.path.join(root,filename))\n                size.append(formatSize(os.path.getsize(os.path.join(root,filename))))\n    res_dict=dict(zip(res,size))\n    return res_dict\n\nw_search = ['*GNHS*.wiff*', '*GHNS*.wiff*']\nw=search_text(w_search,'E:\\')\n```\n* 对指定目录下所有符合匹配字符(以及不含某些字符)文件进行统计\n=两种指定统计之差\n```\ndef remove_text(a,b):\n    ''' 返回的是字典格式 '''\n    # new=list(set(a) ^ set(b))\n    new=dict(a.items()-b.items())\n    return new\n\ndf = pd.DataFrame(pd.Series(new), columns=['size'])\ndf = df.reset_index().rename(columns={'index': 'filename'})\n```\n* 两个目录直接进行对比分析(寻找B在A中缺少的文件)\n```\n'''首先对已存在文件读取，或者转成DataFrame'''\ndef check_diff(df1,df2):\n    df1 = df1.append(df2)\n    df1 = df1.append(df2)\n    df1 = df1.drop_duplicates(subset=['filename'], keep=False)\n    return df1\n```\n* 对目录下指定<b>系列文件</b>进行批量重命名(前端覆盖式命名)\n```\nimport os, sys\n\ndef add_prefix_files(change,text):\n    mark = change\n    old_names = os.listdir( path )\n    for old_name in old_names:\n        if  old_name!= sys.argv[0]:\n            if old_name.endswith(text):\n                os.rename(os.path.join(path,old_name),\n                        os.path.join(path,mark+old_name[len(mark):])) \n                print (old_name,\"has been renamed successfully!\\n\n                        New name is: \",mark+old_name[len(mark):])\n\nIn[0]:path='E:\\'\n      change='b23'\n      text='.wiff'\n      add_prefix_files(change,text)\n\nout[0]:b22_1.wiff has been renamed successfully! \n       New name is:b23_1.wiff\n       b22_2.wiff has been renamed successfully! \n       New name is:b23_2.wiff    \n\n'''直接加前缀可以改成os.path.join(path,mark+old_name)'''\n```\n\n  \n","source":"_posts/TL02.md","raw":"---\ntitle: Linux与windows 文件搜索、统计与重命名\ncomments: True\ntags:\n- OS\ncategories:\n- CODE\n---\n##### Linux 文件查询统计与命名\n*  查看当前目录下文件大小\n```\nls -lh \n```\n* 查看当前目录下的文件数量（包含子目录中的文件） 注意：R，代表子目录\n```\nls -l|grep \"^-\"| wc -l\n```\n* 查看当前目录下的文件夹目录个数（不包含子目录中的目录），如果需要查看子目录的，加上R\n```\nls -lR|grep \"^-\"| wc -l\n```\n<!--more-->\n* 对当前目录下所有的符合匹配字符的文件进行数量统计\n```\nls -l *.wiff|grep \"^-\"| wc -l\nls -l *.wiff.scan|grep \"^-\"| wc -l\nls -l *blk*.wiff.scan|grep \"^-\"| wc -l\n```\n* 对当前目录下及子目录所有的符合匹配字符的文件进行数量统计\n```\nfind . -type f -name \"*GNHS*.wiff.scan\" -exec ls -lh {} \\;\nfind . -type f -name \"*GNHS*.wiff\" ! -name \"*blk*\" -exec ls -lh {} \\;\n# 在后面加上 >out.log，将结果输出到out.log文件中\nfind . -type f -name \"*GNHS*.wiff.scan\" -exec ls -lh {} \\;>out.log\n```\n* 对.wiff文件统一命名成_low.wiff文件\n```\nfor var in *.wiff; do mv \"$var\" \"${var%.wiff}_low.wiff\"; done\n```\n\n\n##### windows下搜索\n* python\n```\nimport os\nimport fnmatch\nimport pandas as pd\n```\n* 对指定目录下所有符合匹配字符(列表形式)文件进行统计\n```\ndef formatSize(bytes):\n    ''' 用mb表示文件大小 '''\n    bytes = float(bytes)\n    kb = bytes / 1024\n    mb = kb / 1024\n    return mb\n\ndef search_text(search,path):\n    ''' 在指定路径搜索指定字段 '''\n    res = []\n    size = []\n    for root, dirnames, filenames in os.walk(os.path.expanduser(path)):\n        for extension in search:\n            for filename in fnmatch.filter(filenames, extension):\n                res.append(os.path.join(root,filename))\n                size.append(formatSize(os.path.getsize(os.path.join(root,filename))))\n    res_dict=dict(zip(res,size))\n    return res_dict\n\nw_search = ['*GNHS*.wiff*', '*GHNS*.wiff*']\nw=search_text(w_search,'E:\\')\n```\n* 对指定目录下所有符合匹配字符(以及不含某些字符)文件进行统计\n=两种指定统计之差\n```\ndef remove_text(a,b):\n    ''' 返回的是字典格式 '''\n    # new=list(set(a) ^ set(b))\n    new=dict(a.items()-b.items())\n    return new\n\ndf = pd.DataFrame(pd.Series(new), columns=['size'])\ndf = df.reset_index().rename(columns={'index': 'filename'})\n```\n* 两个目录直接进行对比分析(寻找B在A中缺少的文件)\n```\n'''首先对已存在文件读取，或者转成DataFrame'''\ndef check_diff(df1,df2):\n    df1 = df1.append(df2)\n    df1 = df1.append(df2)\n    df1 = df1.drop_duplicates(subset=['filename'], keep=False)\n    return df1\n```\n* 对目录下指定<b>系列文件</b>进行批量重命名(前端覆盖式命名)\n```\nimport os, sys\n\ndef add_prefix_files(change,text):\n    mark = change\n    old_names = os.listdir( path )\n    for old_name in old_names:\n        if  old_name!= sys.argv[0]:\n            if old_name.endswith(text):\n                os.rename(os.path.join(path,old_name),\n                        os.path.join(path,mark+old_name[len(mark):])) \n                print (old_name,\"has been renamed successfully!\\n\n                        New name is: \",mark+old_name[len(mark):])\n\nIn[0]:path='E:\\'\n      change='b23'\n      text='.wiff'\n      add_prefix_files(change,text)\n\nout[0]:b22_1.wiff has been renamed successfully! \n       New name is:b23_1.wiff\n       b22_2.wiff has been renamed successfully! \n       New name is:b23_2.wiff    \n\n'''直接加前缀可以改成os.path.join(path,mark+old_name)'''\n```\n\n  \n","slug":"TL02","published":1,"date":"2021-01-11T01:07:59.571Z","updated":"2021-01-13T03:00:44.941Z","layout":"post","photos":[],"link":"","_id":"ckjwdelzu0007b4tx8hceyczw","content":"<h5 id=\"Linux-文件查询统计与命名\"><a href=\"#Linux-文件查询统计与命名\" class=\"headerlink\" title=\"Linux 文件查询统计与命名\"></a>Linux 文件查询统计与命名</h5><ul>\n<li><p>查看当前目录下文件大小</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ls</span> -<span class=\"keyword\">lh</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前目录下的文件数量（包含子目录中的文件） 注意：R，代表子目录</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l|<span class=\"type\">grep</span> <span class=\"string\">\"^-\"</span>| <span class=\"type\">wc</span> -l</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前目录下的文件夹目录个数（不包含子目录中的目录），如果需要查看子目录的，加上R</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -lR|<span class=\"type\">grep</span> <span class=\"string\">\"^-\"</span>| <span class=\"type\">wc</span> -l</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>对当前目录下所有的符合匹配字符的文件进行数量统计</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l *.wiff|<span class=\"type\">grep</span> <span class=\"string\">\"^-\"</span>| <span class=\"type\">wc</span> -l</span><br><span class=\"line\">ls -l *.wiff.scan|<span class=\"type\">grep</span> <span class=\"string\">\"^-\"</span>| <span class=\"type\">wc</span> -l</span><br><span class=\"line\">ls -l *blk*.wiff.scan|<span class=\"type\">grep</span> <span class=\"string\">\"^-\"</span>| <span class=\"type\">wc</span> -l</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对当前目录下及子目录所有的符合匹配字符的文件进行数量统计</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"keyword\">type</span> f -name <span class=\"string\">\"*GNHS*.wiff.scan\"</span> -exec <span class=\"keyword\">ls</span> -lh &#123;&#125; \\;</span><br><span class=\"line\">find . -<span class=\"keyword\">type</span> f -name <span class=\"string\">\"*GNHS*.wiff\"</span> ! -name <span class=\"string\">\"*blk*\"</span> -exec <span class=\"keyword\">ls</span> -lh &#123;&#125; \\;</span><br><span class=\"line\"># 在后面加上 &gt;<span class=\"keyword\">out</span>.<span class=\"keyword\">log</span>，将结果输出到<span class=\"keyword\">out</span>.<span class=\"keyword\">log</span>文件中</span><br><span class=\"line\">find . -<span class=\"keyword\">type</span> f -name <span class=\"string\">\"*GNHS*.wiff.scan\"</span> -exec <span class=\"keyword\">ls</span> -lh &#123;&#125; \\;&gt;<span class=\"keyword\">out</span>.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对.wiff文件统一命名成_low.wiff文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> *.wiff; <span class=\"keyword\">do</span> mv <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;var%.wiff&#125;</span>_low.wiff\"</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"windows下搜索\"><a href=\"#windows下搜索\" class=\"headerlink\" title=\"windows下搜索\"></a>windows下搜索</h5><ul>\n<li><p>python</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> fnmatch</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对指定目录下所有符合匹配字符(列表形式)文件进行统计</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">formatSize</span><span class=\"params\">(bytes)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 用mb表示文件大小 '''</span></span><br><span class=\"line\">    bytes = float(bytes)</span><br><span class=\"line\">    kb = bytes / <span class=\"number\">1024</span></span><br><span class=\"line\">    mb = kb / <span class=\"number\">1024</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search_text</span><span class=\"params\">(search,path)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 在指定路径搜索指定字段 '''</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    size = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirnames, filenames <span class=\"keyword\">in</span> os.walk(os.path.expanduser(path)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> extension <span class=\"keyword\">in</span> search:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> fnmatch.filter(filenames, extension):</span><br><span class=\"line\">                res.append(os.path.join(root,filename))</span><br><span class=\"line\">                size.append(formatSize(os.path.getsize(os.path.join(root,filename))))</span><br><span class=\"line\">    res_dict=dict(zip(res,size))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res_dict</span><br><span class=\"line\"></span><br><span class=\"line\">w_search = [<span class=\"string\">'*GNHS*.wiff*'</span>, <span class=\"string\">'*GHNS*.wiff*'</span>]</span><br><span class=\"line\">w=search_text(w_search,<span class=\"string\">'E:\\')</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对指定目录下所有符合匹配字符(以及不含某些字符)文件进行统计<br>=两种指定统计之差</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove_text</span><span class=\"params\">(a,b)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 返回的是字典格式 '''</span></span><br><span class=\"line\">    <span class=\"comment\"># new=list(set(a) ^ set(b))</span></span><br><span class=\"line\">    new=dict(a.items()-b.items())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.DataFrame(pd.Series(new), columns=[<span class=\"string\">'size'</span>])</span><br><span class=\"line\">df = df.reset_index().rename(columns=&#123;<span class=\"string\">'index'</span>: <span class=\"string\">'filename'</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>两个目录直接进行对比分析(寻找B在A中缺少的文件)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''首先对已存在文件读取，或者转成DataFrame'''</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_diff</span><span class=\"params\">(df1,df2)</span>:</span></span><br><span class=\"line\">    df1 = df1.append(df2)</span><br><span class=\"line\">    df1 = df1.append(df2)</span><br><span class=\"line\">    df1 = df1.drop_duplicates(subset=[<span class=\"string\">'filename'</span>], keep=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对目录下指定<b>系列文件</b>进行批量重命名(前端覆盖式命名)</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os, sys</span><br><span class=\"line\"></span><br><span class=\"line\">def add_prefix_files(<span class=\"keyword\">change</span>,text):</span><br><span class=\"line\">    <span class=\"keyword\">mark</span> = <span class=\"keyword\">change</span></span><br><span class=\"line\">    old_names = os.listdir( path )</span><br><span class=\"line\">    <span class=\"keyword\">for</span> old_name in old_name<span class=\"variable\">s:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>  old_name!= sys.<span class=\"built_in\">argv</span>[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> old_name.endswith(text):</span><br><span class=\"line\">                os.<span class=\"built_in\">rename</span>(os.path.<span class=\"keyword\">join</span>(path,old_name),</span><br><span class=\"line\">                        os.path.<span class=\"keyword\">join</span>(path,<span class=\"keyword\">mark</span>+old_name[<span class=\"built_in\">len</span>(<span class=\"keyword\">mark</span>):])) </span><br><span class=\"line\">                <span class=\"keyword\">print</span> (old_name,<span class=\"comment\">\"has been renamed successfully!\\n</span></span><br><span class=\"line\">                        New name i<span class=\"variable\">s:</span> <span class=\"comment\">\",mark+old_name[len(mark):])</span></span><br><span class=\"line\"></span><br><span class=\"line\">In[<span class=\"number\">0</span>]:path=<span class=\"string\">'E:\\'</span></span><br><span class=\"line\">      <span class=\"keyword\">change</span>=<span class=\"string\">'b23'</span></span><br><span class=\"line\">      text=<span class=\"string\">'.wiff'</span></span><br><span class=\"line\">      add_prefix_files(<span class=\"keyword\">change</span>,text)</span><br><span class=\"line\"></span><br><span class=\"line\">out[<span class=\"number\">0</span>]:b22_1.wiff <span class=\"built_in\">has</span> been renamed successfully! </span><br><span class=\"line\">       New name i<span class=\"variable\">s:b23_1</span>.wiff</span><br><span class=\"line\">       b22_2.wiff <span class=\"built_in\">has</span> been renamed successfully! </span><br><span class=\"line\">       New name i<span class=\"variable\">s:b23_2</span>.wiff    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">''</span><span class=\"string\">'直接加前缀可以改成os.path.join(path,mark+old_name)'</span><span class=\"string\">''</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n","site":{"data":{}},"length":2678,"excerpt":"<h5 id=\"Linux-文件查询统计与命名\"><a href=\"#Linux-文件查询统计与命名\" class=\"headerlink\" title=\"Linux 文件查询统计与命名\"></a>Linux 文件查询统计与命名</h5><ul>\n<li><p>查看当前目录下文件大小</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ls</span> -<span class=\"keyword\">lh</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前目录下的文件数量（包含子目录中的文件） 注意：R，代表子目录</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l|<span class=\"type\">grep</span> <span class=\"string\">\"^-\"</span>| <span class=\"type\">wc</span> -l</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前目录下的文件夹目录个数（不包含子目录中的目录），如果需要查看子目录的，加上R</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -lR|<span class=\"type\">grep</span> <span class=\"string\">\"^-\"</span>| <span class=\"type\">wc</span> -l</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>","more":"<ul>\n<li><p>对当前目录下所有的符合匹配字符的文件进行数量统计</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l *.wiff|<span class=\"type\">grep</span> <span class=\"string\">\"^-\"</span>| <span class=\"type\">wc</span> -l</span><br><span class=\"line\">ls -l *.wiff.scan|<span class=\"type\">grep</span> <span class=\"string\">\"^-\"</span>| <span class=\"type\">wc</span> -l</span><br><span class=\"line\">ls -l *blk*.wiff.scan|<span class=\"type\">grep</span> <span class=\"string\">\"^-\"</span>| <span class=\"type\">wc</span> -l</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对当前目录下及子目录所有的符合匹配字符的文件进行数量统计</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -<span class=\"keyword\">type</span> f -name <span class=\"string\">\"*GNHS*.wiff.scan\"</span> -exec <span class=\"keyword\">ls</span> -lh &#123;&#125; \\;</span><br><span class=\"line\">find . -<span class=\"keyword\">type</span> f -name <span class=\"string\">\"*GNHS*.wiff\"</span> ! -name <span class=\"string\">\"*blk*\"</span> -exec <span class=\"keyword\">ls</span> -lh &#123;&#125; \\;</span><br><span class=\"line\"># 在后面加上 &gt;<span class=\"keyword\">out</span>.<span class=\"keyword\">log</span>，将结果输出到<span class=\"keyword\">out</span>.<span class=\"keyword\">log</span>文件中</span><br><span class=\"line\">find . -<span class=\"keyword\">type</span> f -name <span class=\"string\">\"*GNHS*.wiff.scan\"</span> -exec <span class=\"keyword\">ls</span> -lh &#123;&#125; \\;&gt;<span class=\"keyword\">out</span>.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对.wiff文件统一命名成_low.wiff文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> *.wiff; <span class=\"keyword\">do</span> mv <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span> <span class=\"string\">\"<span class=\"variable\">$&#123;var%.wiff&#125;</span>_low.wiff\"</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h5 id=\"windows下搜索\"><a href=\"#windows下搜索\" class=\"headerlink\" title=\"windows下搜索\"></a>windows下搜索</h5><ul>\n<li><p>python</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> fnmatch</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对指定目录下所有符合匹配字符(列表形式)文件进行统计</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">formatSize</span><span class=\"params\">(bytes)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 用mb表示文件大小 '''</span></span><br><span class=\"line\">    bytes = float(bytes)</span><br><span class=\"line\">    kb = bytes / <span class=\"number\">1024</span></span><br><span class=\"line\">    mb = kb / <span class=\"number\">1024</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search_text</span><span class=\"params\">(search,path)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 在指定路径搜索指定字段 '''</span></span><br><span class=\"line\">    res = []</span><br><span class=\"line\">    size = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirnames, filenames <span class=\"keyword\">in</span> os.walk(os.path.expanduser(path)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> extension <span class=\"keyword\">in</span> search:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> filename <span class=\"keyword\">in</span> fnmatch.filter(filenames, extension):</span><br><span class=\"line\">                res.append(os.path.join(root,filename))</span><br><span class=\"line\">                size.append(formatSize(os.path.getsize(os.path.join(root,filename))))</span><br><span class=\"line\">    res_dict=dict(zip(res,size))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res_dict</span><br><span class=\"line\"></span><br><span class=\"line\">w_search = [<span class=\"string\">'*GNHS*.wiff*'</span>, <span class=\"string\">'*GHNS*.wiff*'</span>]</span><br><span class=\"line\">w=search_text(w_search,<span class=\"string\">'E:\\')</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对指定目录下所有符合匹配字符(以及不含某些字符)文件进行统计<br>=两种指定统计之差</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">remove_text</span><span class=\"params\">(a,b)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">''' 返回的是字典格式 '''</span></span><br><span class=\"line\">    <span class=\"comment\"># new=list(set(a) ^ set(b))</span></span><br><span class=\"line\">    new=dict(a.items()-b.items())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> new</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.DataFrame(pd.Series(new), columns=[<span class=\"string\">'size'</span>])</span><br><span class=\"line\">df = df.reset_index().rename(columns=&#123;<span class=\"string\">'index'</span>: <span class=\"string\">'filename'</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>两个目录直接进行对比分析(寻找B在A中缺少的文件)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'''首先对已存在文件读取，或者转成DataFrame'''</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_diff</span><span class=\"params\">(df1,df2)</span>:</span></span><br><span class=\"line\">    df1 = df1.append(df2)</span><br><span class=\"line\">    df1 = df1.append(df2)</span><br><span class=\"line\">    df1 = df1.drop_duplicates(subset=[<span class=\"string\">'filename'</span>], keep=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对目录下指定<b>系列文件</b>进行批量重命名(前端覆盖式命名)</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os, sys</span><br><span class=\"line\"></span><br><span class=\"line\">def add_prefix_files(<span class=\"keyword\">change</span>,text):</span><br><span class=\"line\">    <span class=\"keyword\">mark</span> = <span class=\"keyword\">change</span></span><br><span class=\"line\">    old_names = os.listdir( path )</span><br><span class=\"line\">    <span class=\"keyword\">for</span> old_name in old_name<span class=\"variable\">s:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>  old_name!= sys.<span class=\"built_in\">argv</span>[<span class=\"number\">0</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> old_name.endswith(text):</span><br><span class=\"line\">                os.<span class=\"built_in\">rename</span>(os.path.<span class=\"keyword\">join</span>(path,old_name),</span><br><span class=\"line\">                        os.path.<span class=\"keyword\">join</span>(path,<span class=\"keyword\">mark</span>+old_name[<span class=\"built_in\">len</span>(<span class=\"keyword\">mark</span>):])) </span><br><span class=\"line\">                <span class=\"keyword\">print</span> (old_name,<span class=\"comment\">\"has been renamed successfully!\\n</span></span><br><span class=\"line\">                        New name i<span class=\"variable\">s:</span> <span class=\"comment\">\",mark+old_name[len(mark):])</span></span><br><span class=\"line\"></span><br><span class=\"line\">In[<span class=\"number\">0</span>]:path=<span class=\"string\">'E:\\'</span></span><br><span class=\"line\">      <span class=\"keyword\">change</span>=<span class=\"string\">'b23'</span></span><br><span class=\"line\">      text=<span class=\"string\">'.wiff'</span></span><br><span class=\"line\">      add_prefix_files(<span class=\"keyword\">change</span>,text)</span><br><span class=\"line\"></span><br><span class=\"line\">out[<span class=\"number\">0</span>]:b22_1.wiff <span class=\"built_in\">has</span> been renamed successfully! </span><br><span class=\"line\">       New name i<span class=\"variable\">s:b23_1</span>.wiff</span><br><span class=\"line\">       b22_2.wiff <span class=\"built_in\">has</span> been renamed successfully! </span><br><span class=\"line\">       New name i<span class=\"variable\">s:b23_2</span>.wiff    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">''</span><span class=\"string\">'直接加前缀可以改成os.path.join(path,mark+old_name)'</span><span class=\"string\">''</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>"},{"title":"Hexo workflow","comments":0,"_content":"##### preparation\n- git, add `id_rsa.pub` to 「Deploy keys」\n| C:\\Users\\Administrator\\.ssh\\id_rsa.pub\n- node.js:v12.8.0\n- npm (mirror)\n\n```\nnpm install -g hexo-cli\nnpm install ## package.json\nnpm install hexo-deploy-cli@x.x.x\n```\n\n##### workflow\n```\ngit clone https://github.com/Alazia/Alazia.github.io.git\nhexo new post\nhexo clean\nhexo g\ngulp\nhexo d\ngit add * (and .gitignore)\ngit commit -m 'source'\ngit push origin source\n```\n","source":"_posts/hexo.md","raw":"---\ntitle: Hexo workflow\ncomments: false\ntags: workflow\ncategories: Hexo\n---\n##### preparation\n- git, add `id_rsa.pub` to 「Deploy keys」\n| C:\\Users\\Administrator\\.ssh\\id_rsa.pub\n- node.js:v12.8.0\n- npm (mirror)\n\n```\nnpm install -g hexo-cli\nnpm install ## package.json\nnpm install hexo-deploy-cli@x.x.x\n```\n\n##### workflow\n```\ngit clone https://github.com/Alazia/Alazia.github.io.git\nhexo new post\nhexo clean\nhexo g\ngulp\nhexo d\ngit add * (and .gitignore)\ngit commit -m 'source'\ngit push origin source\n```\n","slug":"hexo","published":1,"date":"2021-01-13T15:08:54.541Z","updated":"2021-01-13T15:08:54.541Z","layout":"post","photos":[],"link":"","_id":"ckjwdelzv0008b4txwxhexda5","content":"<h5 id=\"preparation\"><a href=\"#preparation\" class=\"headerlink\" title=\"preparation\"></a>preparation</h5><ul>\n<li>git, add <code>id_rsa.pub</code> to 「Deploy keys」<br>| C:\\Users\\Administrator.ssh\\id_rsa.pub</li>\n<li>node.js:v12.8.0</li>\n<li>npm (mirror)</li>\n</ul>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install -g hexo-cli</span><br><span class=\"line\"><span class=\"built_in\">npm</span> install <span class=\"comment\">## package.json</span></span><br><span class=\"line\"><span class=\"built_in\">npm</span> install hexo-deploy-cli@x.x.x</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"workflow\"><a href=\"#workflow\" class=\"headerlink\" title=\"workflow\"></a>workflow</h5><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/Alazia/Alazia.github.io.git</span><br><span class=\"line\">hexo <span class=\"keyword\">new</span> post</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">gulp</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">git <span class=\"built_in\">add</span> * (<span class=\"built_in\">and</span> .gitignore)</span><br><span class=\"line\">git commit -<span class=\"keyword\">m</span> <span class=\"string\">'source'</span></span><br><span class=\"line\">git push origin <span class=\"keyword\">source</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"length":378,"excerpt":"","more":"<h5 id=\"preparation\"><a href=\"#preparation\" class=\"headerlink\" title=\"preparation\"></a>preparation</h5><ul>\n<li>git, add <code>id_rsa.pub</code> to 「Deploy keys」<br>| C:\\Users\\Administrator.ssh\\id_rsa.pub</li>\n<li>node.js:v12.8.0</li>\n<li>npm (mirror)</li>\n</ul>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install -g hexo-cli</span><br><span class=\"line\"><span class=\"built_in\">npm</span> install <span class=\"comment\">## package.json</span></span><br><span class=\"line\"><span class=\"built_in\">npm</span> install hexo-deploy-cli@x.x.x</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"workflow\"><a href=\"#workflow\" class=\"headerlink\" title=\"workflow\"></a>workflow</h5><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone http<span class=\"variable\">s:</span>//github.<span class=\"keyword\">com</span>/Alazia/Alazia.github.io.git</span><br><span class=\"line\">hexo <span class=\"keyword\">new</span> post</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">gulp</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">git <span class=\"built_in\">add</span> * (<span class=\"built_in\">and</span> .gitignore)</span><br><span class=\"line\">git commit -<span class=\"keyword\">m</span> <span class=\"string\">'source'</span></span><br><span class=\"line\">git push origin <span class=\"keyword\">source</span></span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[{"_id":"source/_posts/hello-world/va11.jpg","slug":"va11.jpg","post":"ckjwdelzu0006b4txz17ycl55","modified":0,"renderable":0},{"_id":"source/_posts/TL01/SSHkey.png","slug":"SSHkey.png","post":"ckjwdelzn0000b4tx17mueax1","modified":0,"renderable":0},{"_id":"source/_posts/TL01/branch01.png","slug":"branch01.png","post":"ckjwdelzn0000b4tx17mueax1","modified":0,"renderable":0},{"_id":"source/_posts/TL01/branch02.png","slug":"branch02.png","post":"ckjwdelzn0000b4tx17mueax1","modified":0,"renderable":0},{"_id":"source/_posts/TL01/branch03.png","slug":"branch03.png","post":"ckjwdelzn0000b4tx17mueax1","modified":0,"renderable":0},{"_id":"source/_posts/TL01/branch04.png","slug":"branch04.png","post":"ckjwdelzn0000b4tx17mueax1","modified":0,"renderable":0},{"_id":"source/_posts/TL01/branch05.png","slug":"branch05.png","post":"ckjwdelzn0000b4tx17mueax1","modified":0,"renderable":0},{"_id":"source/_posts/TL01/branch06.png","slug":"branch06.png","post":"ckjwdelzn0000b4tx17mueax1","modified":0,"renderable":0},{"_id":"source/_posts/TL01/branch07.png","slug":"branch07.png","post":"ckjwdelzn0000b4tx17mueax1","modified":0,"renderable":0},{"_id":"source/_posts/TL01/stage.png","slug":"stage.png","post":"ckjwdelzn0000b4tx17mueax1","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckjwdelzu0007b4tx8hceyczw","category_id":"ckjwdelzs0004b4txfj2g6wx6","_id":"ckjwdelzy000cb4txauasqunt"},{"post_id":"ckjwdelzn0000b4tx17mueax1","category_id":"ckjwdelzs0004b4txfj2g6wx6","_id":"ckjwdelzz000fb4txfnczzsmp"},{"post_id":"ckjwdelzq0002b4txbe3o4vyn","category_id":"ckjwdelzw0009b4tx4q8zg9rp","_id":"ckjwdelzz000hb4tx1mokwukw"},{"post_id":"ckjwdelzv0008b4txwxhexda5","category_id":"ckjwdelzz000db4txxbuyyp6i","_id":"ckjwdem00000kb4tx0au4eg2a"}],"PostTag":[{"post_id":"ckjwdelzn0000b4tx17mueax1","tag_id":"ckjwdelzt0005b4txjovr4mpn","_id":"ckjwdelzy000bb4txv8zve5ps"},{"post_id":"ckjwdelzq0002b4txbe3o4vyn","tag_id":"ckjwdelzw000ab4tx1an6n74e","_id":"ckjwdelzz000gb4txt5p5x84r"},{"post_id":"ckjwdelzu0006b4txz17ycl55","tag_id":"ckjwdelzz000eb4txwascfvv7","_id":"ckjwdelzz000jb4txwftxjrms"},{"post_id":"ckjwdelzu0007b4tx8hceyczw","tag_id":"ckjwdelzz000ib4tx4va8lvu6","_id":"ckjwdem00000mb4txloedembp"},{"post_id":"ckjwdelzv0008b4txwxhexda5","tag_id":"ckjwdem00000lb4txxf3gy87b","_id":"ckjwdem00000nb4tx5qpfe6pu"}],"Tag":[{"name":"Tools","_id":"ckjwdelzt0005b4txjovr4mpn"},{"name":"hexo","_id":"ckjwdelzw000ab4tx1an6n74e"},{"name":"Thoughts","_id":"ckjwdelzz000eb4txwascfvv7"},{"name":"OS","_id":"ckjwdelzz000ib4tx4va8lvu6"},{"name":"workflow","_id":"ckjwdem00000lb4txxf3gy87b"}]}}